// Code generated by go-swagger; DO NOT EDIT.

package process_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new process groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for process groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CopySnippet copies a snippet and discards it
*/
func (a *Client) CopySnippet(params *CopySnippetParams, authInfo runtime.ClientAuthInfoWriter) (*CopySnippetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopySnippetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "copySnippet",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/snippet-instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CopySnippetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CopySnippetOK), nil

}

/*
CreateConnection creates a connection
*/
func (a *Client) CreateConnection(params *CreateConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createConnection",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateConnectionOK), nil

}

/*
CreateEmptyAllConnectionsRequest creates a request to drop all flowfiles of all connection queues in this process group
*/
func (a *Client) CreateEmptyAllConnectionsRequest(params *CreateEmptyAllConnectionsRequestParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEmptyAllConnectionsRequestOK, *CreateEmptyAllConnectionsRequestAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmptyAllConnectionsRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEmptyAllConnectionsRequest",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/empty-all-connections-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateEmptyAllConnectionsRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEmptyAllConnectionsRequestOK:
		return value, nil, nil
	case *CreateEmptyAllConnectionsRequestAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateFunnel creates a funnel
*/
func (a *Client) CreateFunnel(params *CreateFunnelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFunnelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFunnelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFunnel",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/funnels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFunnelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFunnelOK), nil

}

/*
CreateInputPort creates an input port
*/
func (a *Client) CreateInputPort(params *CreateInputPortParams, authInfo runtime.ClientAuthInfoWriter) (*CreateInputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInputPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInputPort",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/input-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateInputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInputPortOK), nil

}

/*
CreateLabel creates a label
*/
func (a *Client) CreateLabel(params *CreateLabelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLabel",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLabelOK), nil

}

/*
CreateOutputPort creates an output port
*/
func (a *Client) CreateOutputPort(params *CreateOutputPortParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOutputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOutputPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOutputPort",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/output-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOutputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOutputPortOK), nil

}

/*
CreateProcessGroup creates a process group
*/
func (a *Client) CreateProcessGroup(params *CreateProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProcessGroupOK), nil

}

/*
CreateProcessor creates a new processor
*/
func (a *Client) CreateProcessor(params *CreateProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProcessorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProcessor",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/processors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProcessorOK), nil

}

/*
CreateRemoteProcessGroup creates a new process group
*/
func (a *Client) CreateRemoteProcessGroup(params *CreateRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRemoteProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRemoteProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/remote-process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRemoteProcessGroupOK), nil

}

/*
CreateTemplate creates a template and discards the specified snippet
*/
func (a *Client) CreateTemplate(params *CreateTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTemplateOK), nil

}

/*
DeleteReplaceProcessGroupRequest deletes the replace request with the given ID

Deletes the Replace Request with the given ID. After a request is created via a POST to /process-groups/{id}/replace-requests, it is expected that the client will properly clean up the request by DELETE'ing it, once the Replace process has completed. If the request is deleted before the request completes, then the Replace request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) DeleteReplaceProcessGroupRequest(params *DeleteReplaceProcessGroupRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReplaceProcessGroupRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReplaceProcessGroupRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReplaceProcessGroupRequest",
		Method:             "DELETE",
		PathPattern:        "/process-groups/replace-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteReplaceProcessGroupRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteReplaceProcessGroupRequestOK), nil

}

/*
DeleteVariableRegistryUpdateRequest deletes an update request for a process group s variable registry if the request is not yet complete it will automatically be cancelled

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) DeleteVariableRegistryUpdateRequest(params *DeleteVariableRegistryUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVariableRegistryUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVariableRegistryUpdateRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVariableRegistryUpdateRequest",
		Method:             "DELETE",
		PathPattern:        "/process-groups/{groupId}/variable-registry/update-requests/{updateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteVariableRegistryUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVariableRegistryUpdateRequestOK), nil

}

/*
ExportProcessGroup gets a process group for download
*/
func (a *Client) ExportProcessGroup(params *ExportProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*ExportProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportProcessGroup",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExportProcessGroupOK), nil

}

/*
GetConnections gets all connections
*/
func (a *Client) GetConnections(params *GetConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConnections",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConnectionsOK), nil

}

/*
GetDropAllFlowfilesRequest gets the current status of a drop all flowfiles request
*/
func (a *Client) GetDropAllFlowfilesRequest(params *GetDropAllFlowfilesRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetDropAllFlowfilesRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDropAllFlowfilesRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDropAllFlowfilesRequest",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/empty-all-connections-requests/{drop-request-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDropAllFlowfilesRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDropAllFlowfilesRequestOK), nil

}

/*
GetFunnels gets all funnels
*/
func (a *Client) GetFunnels(params *GetFunnelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFunnelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFunnelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFunnels",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/funnels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFunnelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFunnelsOK), nil

}

/*
GetInputPorts gets all input ports
*/
func (a *Client) GetInputPorts(params *GetInputPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInputPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInputPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInputPorts",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/input-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInputPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInputPortsOK), nil

}

/*
GetLabels gets all labels
*/
func (a *Client) GetLabels(params *GetLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLabels",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLabelsOK), nil

}

/*
GetLocalModifications gets a list of local modifications to the process group since it was last synchronized with the flow registry
*/
func (a *Client) GetLocalModifications(params *GetLocalModificationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetLocalModificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLocalModificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLocalModifications",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/local-modifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLocalModificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLocalModificationsOK), nil

}

/*
GetOutputPorts gets all output ports
*/
func (a *Client) GetOutputPorts(params *GetOutputPortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOutputPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutputPorts",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/output-ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOutputPortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutputPortsOK), nil

}

/*
GetProcessGroup gets a process group
*/
func (a *Client) GetProcessGroup(params *GetProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessGroup",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessGroupOK), nil

}

/*
GetProcessGroups gets all process groups
*/
func (a *Client) GetProcessGroups(params *GetProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessGroups",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessGroupsOK), nil

}

/*
GetProcessors gets all processors
*/
func (a *Client) GetProcessors(params *GetProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessors",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/processors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessorsOK), nil

}

/*
GetRemoteProcessGroups gets all remote process groups
*/
func (a *Client) GetRemoteProcessGroups(params *GetRemoteProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteProcessGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRemoteProcessGroups",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/remote-process-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRemoteProcessGroupsOK), nil

}

/*
GetReplaceProcessGroupRequest returns the replace request with the given ID

Returns the Replace Request with the given ID. Once a Replace Request has been created by performing a POST to /process-groups/{id}/replace-requests, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetReplaceProcessGroupRequest(params *GetReplaceProcessGroupRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetReplaceProcessGroupRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReplaceProcessGroupRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReplaceProcessGroupRequest",
		Method:             "GET",
		PathPattern:        "/process-groups/replace-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReplaceProcessGroupRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReplaceProcessGroupRequestOK), nil

}

/*
GetVariableRegistry gets a process group s variable registry

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetVariableRegistry(params *GetVariableRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*GetVariableRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariableRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVariableRegistry",
		Method:             "GET",
		PathPattern:        "/process-groups/{id}/variable-registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVariableRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVariableRegistryOK), nil

}

/*
GetVariableRegistryUpdateRequest gets a process group s variable registry

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetVariableRegistryUpdateRequest(params *GetVariableRegistryUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetVariableRegistryUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVariableRegistryUpdateRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVariableRegistryUpdateRequest",
		Method:             "GET",
		PathPattern:        "/process-groups/{groupId}/variable-registry/update-requests/{updateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVariableRegistryUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVariableRegistryUpdateRequestOK), nil

}

/*
ImportTemplate imports a template
*/
func (a *Client) ImportTemplate(params *ImportTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*ImportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/templates/import",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ImportTemplateOK), nil

}

/*
InitiateReplaceProcessGroup initiates the replace request of a process group with the given ID

This will initiate the action of replacing a process group with the given process group. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a ProcessGroupReplaceRequestEntity, and the process of replacing the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /process-groups/replace-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /process-groups/replace-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) InitiateReplaceProcessGroup(params *InitiateReplaceProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*InitiateReplaceProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateReplaceProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initiateReplaceProcessGroup",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/replace-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InitiateReplaceProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InitiateReplaceProcessGroupOK), nil

}

/*
InstantiateTemplate instantiates a template
*/
func (a *Client) InstantiateTemplate(params *InstantiateTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*InstantiateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantiateTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "instantiateTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/template-instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstantiateTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InstantiateTemplateOK), nil

}

/*
ProcessGroupsCreateControllerService creates a new controller service
*/
func (a *Client) ProcessGroupsCreateControllerService(params *ProcessGroupsCreateControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*ProcessGroupsCreateControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessGroupsCreateControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "processGroupsCreateControllerService",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProcessGroupsCreateControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProcessGroupsCreateControllerServiceOK), nil

}

/*
ProcessGroupsRemoveDropRequest cancels and or removes a request to drop all flowfiles
*/
func (a *Client) ProcessGroupsRemoveDropRequest(params *ProcessGroupsRemoveDropRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ProcessGroupsRemoveDropRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessGroupsRemoveDropRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "processGroupsRemoveDropRequest",
		Method:             "DELETE",
		PathPattern:        "/process-groups/{id}/empty-all-connections-requests/{drop-request-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProcessGroupsRemoveDropRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProcessGroupsRemoveDropRequestOK), nil

}

/*
RemoveProcessGroup deletes a process group
*/
func (a *Client) RemoveProcessGroup(params *RemoveProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeProcessGroup",
		Method:             "DELETE",
		PathPattern:        "/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveProcessGroupOK), nil

}

/*
ReplaceProcessGroup replaces process group contents with the given ID with the specified process group contents

This endpoint is used for replication within a cluster, when replacing a flow with a new flow. It expects that the flow beingreplaced is not under version control and that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) ReplaceProcessGroup(params *ReplaceProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceProcessGroup",
		Method:             "PUT",
		PathPattern:        "/process-groups/{id}/flow-contents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReplaceProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceProcessGroupOK), nil

}

/*
SubmitUpdateVariableRegistryRequest submits a request to update a process group s variable registry

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SubmitUpdateVariableRegistryRequest(params *SubmitUpdateVariableRegistryRequestParams, authInfo runtime.ClientAuthInfoWriter) (*SubmitUpdateVariableRegistryRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitUpdateVariableRegistryRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitUpdateVariableRegistryRequest",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/variable-registry/update-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitUpdateVariableRegistryRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubmitUpdateVariableRegistryRequestOK), nil

}

/*
UpdateProcessGroup updates a process group
*/
func (a *Client) UpdateProcessGroup(params *UpdateProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProcessGroup",
		Method:             "PUT",
		PathPattern:        "/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProcessGroupOK), nil

}

/*
UpdateVariableRegistry updates the contents of a process group s variable registry

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateVariableRegistry(params *UpdateVariableRegistryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVariableRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVariableRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVariableRegistry",
		Method:             "PUT",
		PathPattern:        "/process-groups/{id}/variable-registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateVariableRegistryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVariableRegistryOK), nil

}

/*
UploadTemplate uploads a template
*/
func (a *Client) UploadTemplate(params *UploadTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*UploadTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadTemplate",
		Method:             "POST",
		PathPattern:        "/process-groups/{id}/templates/upload",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadTemplateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
