// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/go-swagger-nifi/models"
)

// GetAccessPolicyReader is a Reader for the GetAccessPolicy structure.
type GetAccessPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccessPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAccessPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAccessPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAccessPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetAccessPolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAccessPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetAccessPolicyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAccessPolicyOK creates a GetAccessPolicyOK with default headers values
func NewGetAccessPolicyOK() *GetAccessPolicyOK {
	return &GetAccessPolicyOK{}
}

/*GetAccessPolicyOK handles this case with default header values.

successful operation
*/
type GetAccessPolicyOK struct {
	Payload *models.AccessPolicyEntity
}

func (o *GetAccessPolicyOK) Error() string {
	return fmt.Sprintf("[GET /policies/{id}][%d] getAccessPolicyOK  %+v", 200, o.Payload)
}

func (o *GetAccessPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccessPolicyEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPolicyBadRequest creates a GetAccessPolicyBadRequest with default headers values
func NewGetAccessPolicyBadRequest() *GetAccessPolicyBadRequest {
	return &GetAccessPolicyBadRequest{}
}

/*GetAccessPolicyBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type GetAccessPolicyBadRequest struct {
}

func (o *GetAccessPolicyBadRequest) Error() string {
	return fmt.Sprintf("[GET /policies/{id}][%d] getAccessPolicyBadRequest ", 400)
}

func (o *GetAccessPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccessPolicyUnauthorized creates a GetAccessPolicyUnauthorized with default headers values
func NewGetAccessPolicyUnauthorized() *GetAccessPolicyUnauthorized {
	return &GetAccessPolicyUnauthorized{}
}

/*GetAccessPolicyUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type GetAccessPolicyUnauthorized struct {
}

func (o *GetAccessPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /policies/{id}][%d] getAccessPolicyUnauthorized ", 401)
}

func (o *GetAccessPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccessPolicyForbidden creates a GetAccessPolicyForbidden with default headers values
func NewGetAccessPolicyForbidden() *GetAccessPolicyForbidden {
	return &GetAccessPolicyForbidden{}
}

/*GetAccessPolicyForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type GetAccessPolicyForbidden struct {
}

func (o *GetAccessPolicyForbidden) Error() string {
	return fmt.Sprintf("[GET /policies/{id}][%d] getAccessPolicyForbidden ", 403)
}

func (o *GetAccessPolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccessPolicyNotFound creates a GetAccessPolicyNotFound with default headers values
func NewGetAccessPolicyNotFound() *GetAccessPolicyNotFound {
	return &GetAccessPolicyNotFound{}
}

/*GetAccessPolicyNotFound handles this case with default header values.

The specified resource could not be found.
*/
type GetAccessPolicyNotFound struct {
}

func (o *GetAccessPolicyNotFound) Error() string {
	return fmt.Sprintf("[GET /policies/{id}][%d] getAccessPolicyNotFound ", 404)
}

func (o *GetAccessPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccessPolicyConflict creates a GetAccessPolicyConflict with default headers values
func NewGetAccessPolicyConflict() *GetAccessPolicyConflict {
	return &GetAccessPolicyConflict{}
}

/*GetAccessPolicyConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type GetAccessPolicyConflict struct {
}

func (o *GetAccessPolicyConflict) Error() string {
	return fmt.Sprintf("[GET /policies/{id}][%d] getAccessPolicyConflict ", 409)
}

func (o *GetAccessPolicyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
