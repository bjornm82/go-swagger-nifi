// Code generated by go-swagger; DO NOT EDIT.

package site_to_site

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new site to site API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for site to site API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPeers returns the available peers and its status of this ni fi
*/
func (a *Client) GetPeers(params *GetPeersParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPeers",
		Method:             "GET",
		PathPattern:        "/site-to-site/peers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPeersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeersOK), nil

}

/*
GetSiteToSiteDetails returns the details about this ni fi necessary to communicate via site to site
*/
func (a *Client) GetSiteToSiteDetails(params *GetSiteToSiteDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSiteToSiteDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteToSiteDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSiteToSiteDetails",
		Method:             "GET",
		PathPattern:        "/site-to-site",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSiteToSiteDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSiteToSiteDetailsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
