// Code generated by go-swagger; DO NOT EDIT.

package counters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCountersParams creates a new GetCountersParams object
// with the default values initialized.
func NewGetCountersParams() *GetCountersParams {
	var (
		nodewiseDefault = bool(false)
	)
	return &GetCountersParams{
		Nodewise: &nodewiseDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCountersParamsWithTimeout creates a new GetCountersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCountersParamsWithTimeout(timeout time.Duration) *GetCountersParams {
	var (
		nodewiseDefault = bool(false)
	)
	return &GetCountersParams{
		Nodewise: &nodewiseDefault,

		timeout: timeout,
	}
}

// NewGetCountersParamsWithContext creates a new GetCountersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCountersParamsWithContext(ctx context.Context) *GetCountersParams {
	var (
		nodewiseDefault = bool(false)
	)
	return &GetCountersParams{
		Nodewise: &nodewiseDefault,

		Context: ctx,
	}
}

// NewGetCountersParamsWithHTTPClient creates a new GetCountersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCountersParamsWithHTTPClient(client *http.Client) *GetCountersParams {
	var (
		nodewiseDefault = bool(false)
	)
	return &GetCountersParams{
		Nodewise:   &nodewiseDefault,
		HTTPClient: client,
	}
}

/*GetCountersParams contains all the parameters to send to the API endpoint
for the get counters operation typically these are written to a http.Request
*/
type GetCountersParams struct {

	/*ClusterNodeID
	  The id of the node where to get the status.

	*/
	ClusterNodeID *string
	/*Nodewise
	  Whether or not to include the breakdown per node. Optional, defaults to false

	*/
	Nodewise *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get counters params
func (o *GetCountersParams) WithTimeout(timeout time.Duration) *GetCountersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get counters params
func (o *GetCountersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get counters params
func (o *GetCountersParams) WithContext(ctx context.Context) *GetCountersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get counters params
func (o *GetCountersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get counters params
func (o *GetCountersParams) WithHTTPClient(client *http.Client) *GetCountersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get counters params
func (o *GetCountersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterNodeID adds the clusterNodeID to the get counters params
func (o *GetCountersParams) WithClusterNodeID(clusterNodeID *string) *GetCountersParams {
	o.SetClusterNodeID(clusterNodeID)
	return o
}

// SetClusterNodeID adds the clusterNodeId to the get counters params
func (o *GetCountersParams) SetClusterNodeID(clusterNodeID *string) {
	o.ClusterNodeID = clusterNodeID
}

// WithNodewise adds the nodewise to the get counters params
func (o *GetCountersParams) WithNodewise(nodewise *bool) *GetCountersParams {
	o.SetNodewise(nodewise)
	return o
}

// SetNodewise adds the nodewise to the get counters params
func (o *GetCountersParams) SetNodewise(nodewise *bool) {
	o.Nodewise = nodewise
}

// WriteToRequest writes these params to a swagger request
func (o *GetCountersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterNodeID != nil {

		// query param clusterNodeId
		var qrClusterNodeID string
		if o.ClusterNodeID != nil {
			qrClusterNodeID = *o.ClusterNodeID
		}
		qClusterNodeID := qrClusterNodeID
		if qClusterNodeID != "" {
			if err := r.SetQueryParam("clusterNodeId", qClusterNodeID); err != nil {
				return err
			}
		}

	}

	if o.Nodewise != nil {

		// query param nodewise
		var qrNodewise bool
		if o.Nodewise != nil {
			qrNodewise = *o.Nodewise
		}
		qNodewise := swag.FormatBool(qrNodewise)
		if qNodewise != "" {
			if err := r.SetQueryParam("nodewise", qNodewise); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
