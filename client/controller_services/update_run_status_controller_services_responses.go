// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bjornm82/go-swagger-nifi/models"
)

// UpdateRunStatusControllerServicesReader is a Reader for the UpdateRunStatusControllerServices structure.
type UpdateRunStatusControllerServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRunStatusControllerServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRunStatusControllerServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRunStatusControllerServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRunStatusControllerServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRunStatusControllerServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRunStatusControllerServicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRunStatusControllerServicesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRunStatusControllerServicesOK creates a UpdateRunStatusControllerServicesOK with default headers values
func NewUpdateRunStatusControllerServicesOK() *UpdateRunStatusControllerServicesOK {
	return &UpdateRunStatusControllerServicesOK{}
}

/*UpdateRunStatusControllerServicesOK handles this case with default header values.

successful operation
*/
type UpdateRunStatusControllerServicesOK struct {
	Payload *models.ControllerServiceEntity
}

func (o *UpdateRunStatusControllerServicesOK) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] updateRunStatusControllerServicesOK  %+v", 200, o.Payload)
}

func (o *UpdateRunStatusControllerServicesOK) GetPayload() *models.ControllerServiceEntity {
	return o.Payload
}

func (o *UpdateRunStatusControllerServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ControllerServiceEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunStatusControllerServicesBadRequest creates a UpdateRunStatusControllerServicesBadRequest with default headers values
func NewUpdateRunStatusControllerServicesBadRequest() *UpdateRunStatusControllerServicesBadRequest {
	return &UpdateRunStatusControllerServicesBadRequest{}
}

/*UpdateRunStatusControllerServicesBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateRunStatusControllerServicesBadRequest struct {
}

func (o *UpdateRunStatusControllerServicesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] updateRunStatusControllerServicesBadRequest ", 400)
}

func (o *UpdateRunStatusControllerServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusControllerServicesUnauthorized creates a UpdateRunStatusControllerServicesUnauthorized with default headers values
func NewUpdateRunStatusControllerServicesUnauthorized() *UpdateRunStatusControllerServicesUnauthorized {
	return &UpdateRunStatusControllerServicesUnauthorized{}
}

/*UpdateRunStatusControllerServicesUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type UpdateRunStatusControllerServicesUnauthorized struct {
}

func (o *UpdateRunStatusControllerServicesUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] updateRunStatusControllerServicesUnauthorized ", 401)
}

func (o *UpdateRunStatusControllerServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusControllerServicesForbidden creates a UpdateRunStatusControllerServicesForbidden with default headers values
func NewUpdateRunStatusControllerServicesForbidden() *UpdateRunStatusControllerServicesForbidden {
	return &UpdateRunStatusControllerServicesForbidden{}
}

/*UpdateRunStatusControllerServicesForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type UpdateRunStatusControllerServicesForbidden struct {
}

func (o *UpdateRunStatusControllerServicesForbidden) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] updateRunStatusControllerServicesForbidden ", 403)
}

func (o *UpdateRunStatusControllerServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusControllerServicesNotFound creates a UpdateRunStatusControllerServicesNotFound with default headers values
func NewUpdateRunStatusControllerServicesNotFound() *UpdateRunStatusControllerServicesNotFound {
	return &UpdateRunStatusControllerServicesNotFound{}
}

/*UpdateRunStatusControllerServicesNotFound handles this case with default header values.

The specified resource could not be found.
*/
type UpdateRunStatusControllerServicesNotFound struct {
}

func (o *UpdateRunStatusControllerServicesNotFound) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] updateRunStatusControllerServicesNotFound ", 404)
}

func (o *UpdateRunStatusControllerServicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusControllerServicesConflict creates a UpdateRunStatusControllerServicesConflict with default headers values
func NewUpdateRunStatusControllerServicesConflict() *UpdateRunStatusControllerServicesConflict {
	return &UpdateRunStatusControllerServicesConflict{}
}

/*UpdateRunStatusControllerServicesConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateRunStatusControllerServicesConflict struct {
}

func (o *UpdateRunStatusControllerServicesConflict) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] updateRunStatusControllerServicesConflict ", 409)
}

func (o *UpdateRunStatusControllerServicesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
