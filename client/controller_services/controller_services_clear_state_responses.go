// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/swagger-nifi/models"
)

// ControllerServicesClearStateReader is a Reader for the ControllerServicesClearState structure.
type ControllerServicesClearStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllerServicesClearStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllerServicesClearStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllerServicesClearStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllerServicesClearStateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllerServicesClearStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllerServicesClearStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewControllerServicesClearStateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllerServicesClearStateOK creates a ControllerServicesClearStateOK with default headers values
func NewControllerServicesClearStateOK() *ControllerServicesClearStateOK {
	return &ControllerServicesClearStateOK{}
}

/*ControllerServicesClearStateOK handles this case with default header values.

successful operation
*/
type ControllerServicesClearStateOK struct {
	Payload *models.ComponentStateEntity
}

func (o *ControllerServicesClearStateOK) Error() string {
	return fmt.Sprintf("[POST /controller-services/{id}/state/clear-requests][%d] controllerServicesClearStateOK  %+v", 200, o.Payload)
}

func (o *ControllerServicesClearStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ComponentStateEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllerServicesClearStateBadRequest creates a ControllerServicesClearStateBadRequest with default headers values
func NewControllerServicesClearStateBadRequest() *ControllerServicesClearStateBadRequest {
	return &ControllerServicesClearStateBadRequest{}
}

/*ControllerServicesClearStateBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ControllerServicesClearStateBadRequest struct {
}

func (o *ControllerServicesClearStateBadRequest) Error() string {
	return fmt.Sprintf("[POST /controller-services/{id}/state/clear-requests][%d] controllerServicesClearStateBadRequest ", 400)
}

func (o *ControllerServicesClearStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesClearStateUnauthorized creates a ControllerServicesClearStateUnauthorized with default headers values
func NewControllerServicesClearStateUnauthorized() *ControllerServicesClearStateUnauthorized {
	return &ControllerServicesClearStateUnauthorized{}
}

/*ControllerServicesClearStateUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ControllerServicesClearStateUnauthorized struct {
}

func (o *ControllerServicesClearStateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /controller-services/{id}/state/clear-requests][%d] controllerServicesClearStateUnauthorized ", 401)
}

func (o *ControllerServicesClearStateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesClearStateForbidden creates a ControllerServicesClearStateForbidden with default headers values
func NewControllerServicesClearStateForbidden() *ControllerServicesClearStateForbidden {
	return &ControllerServicesClearStateForbidden{}
}

/*ControllerServicesClearStateForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ControllerServicesClearStateForbidden struct {
}

func (o *ControllerServicesClearStateForbidden) Error() string {
	return fmt.Sprintf("[POST /controller-services/{id}/state/clear-requests][%d] controllerServicesClearStateForbidden ", 403)
}

func (o *ControllerServicesClearStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesClearStateNotFound creates a ControllerServicesClearStateNotFound with default headers values
func NewControllerServicesClearStateNotFound() *ControllerServicesClearStateNotFound {
	return &ControllerServicesClearStateNotFound{}
}

/*ControllerServicesClearStateNotFound handles this case with default header values.

The specified resource could not be found.
*/
type ControllerServicesClearStateNotFound struct {
}

func (o *ControllerServicesClearStateNotFound) Error() string {
	return fmt.Sprintf("[POST /controller-services/{id}/state/clear-requests][%d] controllerServicesClearStateNotFound ", 404)
}

func (o *ControllerServicesClearStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesClearStateConflict creates a ControllerServicesClearStateConflict with default headers values
func NewControllerServicesClearStateConflict() *ControllerServicesClearStateConflict {
	return &ControllerServicesClearStateConflict{}
}

/*ControllerServicesClearStateConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ControllerServicesClearStateConflict struct {
}

func (o *ControllerServicesClearStateConflict) Error() string {
	return fmt.Sprintf("[POST /controller-services/{id}/state/clear-requests][%d] controllerServicesClearStateConflict ", 409)
}

func (o *ControllerServicesClearStateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
