// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetControllerServiceParams creates a new GetControllerServiceParams object
// with the default values initialized.
func NewGetControllerServiceParams() *GetControllerServiceParams {
	var ()
	return &GetControllerServiceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetControllerServiceParamsWithTimeout creates a new GetControllerServiceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetControllerServiceParamsWithTimeout(timeout time.Duration) *GetControllerServiceParams {
	var ()
	return &GetControllerServiceParams{

		timeout: timeout,
	}
}

// NewGetControllerServiceParamsWithContext creates a new GetControllerServiceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetControllerServiceParamsWithContext(ctx context.Context) *GetControllerServiceParams {
	var ()
	return &GetControllerServiceParams{

		Context: ctx,
	}
}

// NewGetControllerServiceParamsWithHTTPClient creates a new GetControllerServiceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetControllerServiceParamsWithHTTPClient(client *http.Client) *GetControllerServiceParams {
	var ()
	return &GetControllerServiceParams{
		HTTPClient: client,
	}
}

/*GetControllerServiceParams contains all the parameters to send to the API endpoint
for the get controller service operation typically these are written to a http.Request
*/
type GetControllerServiceParams struct {

	/*ID
	  The controller service id.

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get controller service params
func (o *GetControllerServiceParams) WithTimeout(timeout time.Duration) *GetControllerServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get controller service params
func (o *GetControllerServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get controller service params
func (o *GetControllerServiceParams) WithContext(ctx context.Context) *GetControllerServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get controller service params
func (o *GetControllerServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get controller service params
func (o *GetControllerServiceParams) WithHTTPClient(client *http.Client) *GetControllerServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get controller service params
func (o *GetControllerServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get controller service params
func (o *GetControllerServiceParams) WithID(id string) *GetControllerServiceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get controller service params
func (o *GetControllerServiceParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetControllerServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
