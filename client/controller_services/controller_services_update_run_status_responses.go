// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/swagger-nifi/models"
)

// ControllerServicesUpdateRunStatusReader is a Reader for the ControllerServicesUpdateRunStatus structure.
type ControllerServicesUpdateRunStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllerServicesUpdateRunStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllerServicesUpdateRunStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllerServicesUpdateRunStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllerServicesUpdateRunStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllerServicesUpdateRunStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewControllerServicesUpdateRunStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewControllerServicesUpdateRunStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllerServicesUpdateRunStatusOK creates a ControllerServicesUpdateRunStatusOK with default headers values
func NewControllerServicesUpdateRunStatusOK() *ControllerServicesUpdateRunStatusOK {
	return &ControllerServicesUpdateRunStatusOK{}
}

/*ControllerServicesUpdateRunStatusOK handles this case with default header values.

successful operation
*/
type ControllerServicesUpdateRunStatusOK struct {
	Payload *models.ControllerServiceEntity
}

func (o *ControllerServicesUpdateRunStatusOK) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] controllerServicesUpdateRunStatusOK  %+v", 200, o.Payload)
}

func (o *ControllerServicesUpdateRunStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ControllerServiceEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllerServicesUpdateRunStatusBadRequest creates a ControllerServicesUpdateRunStatusBadRequest with default headers values
func NewControllerServicesUpdateRunStatusBadRequest() *ControllerServicesUpdateRunStatusBadRequest {
	return &ControllerServicesUpdateRunStatusBadRequest{}
}

/*ControllerServicesUpdateRunStatusBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ControllerServicesUpdateRunStatusBadRequest struct {
}

func (o *ControllerServicesUpdateRunStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] controllerServicesUpdateRunStatusBadRequest ", 400)
}

func (o *ControllerServicesUpdateRunStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesUpdateRunStatusUnauthorized creates a ControllerServicesUpdateRunStatusUnauthorized with default headers values
func NewControllerServicesUpdateRunStatusUnauthorized() *ControllerServicesUpdateRunStatusUnauthorized {
	return &ControllerServicesUpdateRunStatusUnauthorized{}
}

/*ControllerServicesUpdateRunStatusUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ControllerServicesUpdateRunStatusUnauthorized struct {
}

func (o *ControllerServicesUpdateRunStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] controllerServicesUpdateRunStatusUnauthorized ", 401)
}

func (o *ControllerServicesUpdateRunStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesUpdateRunStatusForbidden creates a ControllerServicesUpdateRunStatusForbidden with default headers values
func NewControllerServicesUpdateRunStatusForbidden() *ControllerServicesUpdateRunStatusForbidden {
	return &ControllerServicesUpdateRunStatusForbidden{}
}

/*ControllerServicesUpdateRunStatusForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ControllerServicesUpdateRunStatusForbidden struct {
}

func (o *ControllerServicesUpdateRunStatusForbidden) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] controllerServicesUpdateRunStatusForbidden ", 403)
}

func (o *ControllerServicesUpdateRunStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesUpdateRunStatusNotFound creates a ControllerServicesUpdateRunStatusNotFound with default headers values
func NewControllerServicesUpdateRunStatusNotFound() *ControllerServicesUpdateRunStatusNotFound {
	return &ControllerServicesUpdateRunStatusNotFound{}
}

/*ControllerServicesUpdateRunStatusNotFound handles this case with default header values.

The specified resource could not be found.
*/
type ControllerServicesUpdateRunStatusNotFound struct {
}

func (o *ControllerServicesUpdateRunStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] controllerServicesUpdateRunStatusNotFound ", 404)
}

func (o *ControllerServicesUpdateRunStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerServicesUpdateRunStatusConflict creates a ControllerServicesUpdateRunStatusConflict with default headers values
func NewControllerServicesUpdateRunStatusConflict() *ControllerServicesUpdateRunStatusConflict {
	return &ControllerServicesUpdateRunStatusConflict{}
}

/*ControllerServicesUpdateRunStatusConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ControllerServicesUpdateRunStatusConflict struct {
}

func (o *ControllerServicesUpdateRunStatusConflict) Error() string {
	return fmt.Sprintf("[PUT /controller-services/{id}/run-status][%d] controllerServicesUpdateRunStatusConflict ", 409)
}

func (o *ControllerServicesUpdateRunStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
