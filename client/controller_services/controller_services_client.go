// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new controller services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for controller services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ControllerServicesClearState clears the state for a controller service
*/
func (a *Client) ControllerServicesClearState(params *ControllerServicesClearStateParams, authInfo runtime.ClientAuthInfoWriter) (*ControllerServicesClearStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllerServicesClearStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllerServicesClearState",
		Method:             "POST",
		PathPattern:        "/controller-services/{id}/state/clear-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ControllerServicesClearStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllerServicesClearStateOK), nil

}

/*
ControllerServicesGetPropertyDescriptor gets a controller service property descriptor
*/
func (a *Client) ControllerServicesGetPropertyDescriptor(params *ControllerServicesGetPropertyDescriptorParams, authInfo runtime.ClientAuthInfoWriter) (*ControllerServicesGetPropertyDescriptorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllerServicesGetPropertyDescriptorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllerServicesGetPropertyDescriptor",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}/descriptors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ControllerServicesGetPropertyDescriptorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllerServicesGetPropertyDescriptorOK), nil

}

/*
ControllerServicesGetState gets the state for a controller service
*/
func (a *Client) ControllerServicesGetState(params *ControllerServicesGetStateParams, authInfo runtime.ClientAuthInfoWriter) (*ControllerServicesGetStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllerServicesGetStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllerServicesGetState",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ControllerServicesGetStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllerServicesGetStateOK), nil

}

/*
ControllerServicesUpdateRunStatus updates run status of a controller service
*/
func (a *Client) ControllerServicesUpdateRunStatus(params *ControllerServicesUpdateRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ControllerServicesUpdateRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllerServicesUpdateRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllerServicesUpdateRunStatus",
		Method:             "PUT",
		PathPattern:        "/controller-services/{id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ControllerServicesUpdateRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllerServicesUpdateRunStatusOK), nil

}

/*
GetControllerService gets a controller service
*/
func (a *Client) GetControllerService(params *GetControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerService",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetControllerServiceOK), nil

}

/*
GetControllerServiceReferences gets a controller service
*/
func (a *Client) GetControllerServiceReferences(params *GetControllerServiceReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServiceReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServiceReferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerServiceReferences",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}/references",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServiceReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetControllerServiceReferencesOK), nil

}

/*
RemoveControllerService deletes a controller service
*/
func (a *Client) RemoveControllerService(params *RemoveControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeControllerService",
		Method:             "DELETE",
		PathPattern:        "/controller-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveControllerServiceOK), nil

}

/*
UpdateControllerService updates a controller service
*/
func (a *Client) UpdateControllerService(params *UpdateControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateControllerService",
		Method:             "PUT",
		PathPattern:        "/controller-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateControllerServiceOK), nil

}

/*
UpdateControllerServiceReferences updates a controller services references
*/
func (a *Client) UpdateControllerServiceReferences(params *UpdateControllerServiceReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerServiceReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateControllerServiceReferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateControllerServiceReferences",
		Method:             "PUT",
		PathPattern:        "/controller-services/{id}/references",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateControllerServiceReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateControllerServiceReferencesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
