// Code generated by go-swagger; DO NOT EDIT.

package controller_services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new controller services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for controller services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ClearStateControllerServices(params *ClearStateControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ClearStateControllerServicesOK, error)

	GetControllerService(params *GetControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServiceOK, error)

	GetControllerServiceReferences(params *GetControllerServiceReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServiceReferencesOK, error)

	GetPropertyDescriptorControllerServices(params *GetPropertyDescriptorControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPropertyDescriptorControllerServicesOK, error)

	GetStateControllerServices(params *GetStateControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetStateControllerServicesOK, error)

	RemoveControllerService(params *RemoveControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveControllerServiceOK, error)

	UpdateControllerService(params *UpdateControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerServiceOK, error)

	UpdateControllerServiceReferences(params *UpdateControllerServiceReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerServiceReferencesOK, error)

	UpdateRunStatusControllerServices(params *UpdateRunStatusControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunStatusControllerServicesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ClearStateControllerServices clears the state for a controller service
*/
func (a *Client) ClearStateControllerServices(params *ClearStateControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ClearStateControllerServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearStateControllerServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clearStateControllerServices",
		Method:             "POST",
		PathPattern:        "/controller-services/{id}/state/clear-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClearStateControllerServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClearStateControllerServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clearStateControllerServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetControllerService gets a controller service
*/
func (a *Client) GetControllerService(params *GetControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerService",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetControllerServiceReferences gets a controller service
*/
func (a *Client) GetControllerServiceReferences(params *GetControllerServiceReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServiceReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServiceReferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerServiceReferences",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}/references",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServiceReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerServiceReferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerServiceReferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPropertyDescriptorControllerServices gets a controller service property descriptor
*/
func (a *Client) GetPropertyDescriptorControllerServices(params *GetPropertyDescriptorControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPropertyDescriptorControllerServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPropertyDescriptorControllerServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPropertyDescriptorControllerServices",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}/descriptors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPropertyDescriptorControllerServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPropertyDescriptorControllerServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPropertyDescriptorControllerServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStateControllerServices gets the state for a controller service
*/
func (a *Client) GetStateControllerServices(params *GetStateControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetStateControllerServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStateControllerServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStateControllerServices",
		Method:             "GET",
		PathPattern:        "/controller-services/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStateControllerServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStateControllerServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStateControllerServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveControllerService deletes a controller service
*/
func (a *Client) RemoveControllerService(params *RemoveControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeControllerService",
		Method:             "DELETE",
		PathPattern:        "/controller-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveControllerServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeControllerService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateControllerService updates a controller service
*/
func (a *Client) UpdateControllerService(params *UpdateControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateControllerService",
		Method:             "PUT",
		PathPattern:        "/controller-services/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateControllerServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateControllerService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateControllerServiceReferences updates a controller services references
*/
func (a *Client) UpdateControllerServiceReferences(params *UpdateControllerServiceReferencesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerServiceReferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateControllerServiceReferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateControllerServiceReferences",
		Method:             "PUT",
		PathPattern:        "/controller-services/{id}/references",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateControllerServiceReferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateControllerServiceReferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateControllerServiceReferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunStatusControllerServices updates run status of a controller service
*/
func (a *Client) UpdateRunStatusControllerServices(params *UpdateRunStatusControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunStatusControllerServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunStatusControllerServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRunStatusControllerServices",
		Method:             "PUT",
		PathPattern:        "/controller-services/{id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRunStatusControllerServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunStatusControllerServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunStatusControllerServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
