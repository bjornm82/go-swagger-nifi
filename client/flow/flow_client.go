// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new flow API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flow API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ActivateControllerServices enables or disable controller services in the specified process group
*/
func (a *Client) ActivateControllerServices(params *ActivateControllerServicesParams, authInfo runtime.ClientAuthInfoWriter) (*ActivateControllerServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateControllerServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "activateControllerServices",
		Method:             "PUT",
		PathPattern:        "/flow/process-groups/{id}/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActivateControllerServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ActivateControllerServicesOK), nil

}

/*
GenerateClientID generates a client id
*/
func (a *Client) GenerateClientID(params *GenerateClientIDParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateClientIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateClientIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generateClientId",
		Method:             "GET",
		PathPattern:        "/flow/client-id",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GenerateClientIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenerateClientIDOK), nil

}

/*
GetAboutInfo retrieves details about this ni fi to put in the about dialog
*/
func (a *Client) GetAboutInfo(params *GetAboutInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetAboutInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAboutInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAboutInfo",
		Method:             "GET",
		PathPattern:        "/flow/about",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAboutInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAboutInfoOK), nil

}

/*
GetAction gets an action

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetAction(params *GetActionParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAction",
		Method:             "GET",
		PathPattern:        "/flow/history/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetActionOK), nil

}

/*
GetBanners retrieves the banners for this ni fi
*/
func (a *Client) GetBanners(params *GetBannersParams, authInfo runtime.ClientAuthInfoWriter) (*GetBannersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBannersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBanners",
		Method:             "GET",
		PathPattern:        "/flow/banners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBannersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBannersOK), nil

}

/*
GetBuckets gets the buckets from the specified registry for the current user
*/
func (a *Client) GetBuckets(params *GetBucketsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBucketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBucketsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuckets",
		Method:             "GET",
		PathPattern:        "/flow/registries/{id}/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBucketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBucketsOK), nil

}

/*
GetBulletinBoard gets current bulletins
*/
func (a *Client) GetBulletinBoard(params *GetBulletinBoardParams, authInfo runtime.ClientAuthInfoWriter) (*GetBulletinBoardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBulletinBoardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBulletinBoard",
		Method:             "GET",
		PathPattern:        "/flow/bulletin-board",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBulletinBoardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBulletinBoardOK), nil

}

/*
GetBulletins retrieves controller level bulletins
*/
func (a *Client) GetBulletins(params *GetBulletinsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBulletinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBulletinsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBulletins",
		Method:             "GET",
		PathPattern:        "/flow/controller/bulletins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBulletinsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBulletinsOK), nil

}

/*
GetClusterSummary thes cluster summary for this ni fi
*/
func (a *Client) GetClusterSummary(params *GetClusterSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterSummary",
		Method:             "GET",
		PathPattern:        "/flow/cluster/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterSummaryOK), nil

}

/*
GetComponentHistory gets configuration history for a component

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetComponentHistory(params *GetComponentHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetComponentHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComponentHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComponentHistory",
		Method:             "GET",
		PathPattern:        "/flow/history/components/{componentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetComponentHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComponentHistoryOK), nil

}

/*
GetConnectionStatistics gets statistics for a connection
*/
func (a *Client) GetConnectionStatistics(params *GetConnectionStatisticsParams, authInfo runtime.ClientAuthInfoWriter) (*GetConnectionStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionStatisticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConnectionStatistics",
		Method:             "GET",
		PathPattern:        "/flow/connections/{id}/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConnectionStatisticsOK), nil

}

/*
GetConnectionStatus gets status for a connection
*/
func (a *Client) GetConnectionStatus(params *GetConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetConnectionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConnectionStatus",
		Method:             "GET",
		PathPattern:        "/flow/connections/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConnectionStatusOK), nil

}

/*
GetConnectionStatusHistory gets the status history for a connection
*/
func (a *Client) GetConnectionStatusHistory(params *GetConnectionStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetConnectionStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionStatusHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConnectionStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/connections/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConnectionStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConnectionStatusHistoryOK), nil

}

/*
GetControllerServiceTypes retrieves the types of controller services that this ni fi supports

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetControllerServiceTypes(params *GetControllerServiceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServiceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServiceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerServiceTypes",
		Method:             "GET",
		PathPattern:        "/flow/controller-service-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServiceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetControllerServiceTypesOK), nil

}

/*
GetControllerServicesFromController gets controller services for reporting tasks
*/
func (a *Client) GetControllerServicesFromController(params *GetControllerServicesFromControllerParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServicesFromControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServicesFromControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerServicesFromController",
		Method:             "GET",
		PathPattern:        "/flow/controller/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServicesFromControllerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetControllerServicesFromControllerOK), nil

}

/*
GetControllerServicesFromGroup gets all controller services
*/
func (a *Client) GetControllerServicesFromGroup(params *GetControllerServicesFromGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerServicesFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerServicesFromGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerServicesFromGroup",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerServicesFromGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetControllerServicesFromGroupOK), nil

}

/*
GetControllerStatus gets the current status of this ni fi
*/
func (a *Client) GetControllerStatus(params *GetControllerStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerStatus",
		Method:             "GET",
		PathPattern:        "/flow/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetControllerStatusOK), nil

}

/*
GetCurrentUser retrieves the user identity of the user making the request
*/
func (a *Client) GetCurrentUser(params *GetCurrentUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentUser",
		Method:             "GET",
		PathPattern:        "/flow/current-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCurrentUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentUserOK), nil

}

/*
GetFlow gets a process group
*/
func (a *Client) GetFlow(params *GetFlowParams, authInfo runtime.ClientAuthInfoWriter) (*GetFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlow",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowOK), nil

}

/*
GetFlowConfig retrieves the configuration for this ni fi flow
*/
func (a *Client) GetFlowConfig(params *GetFlowConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetFlowConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowConfig",
		Method:             "GET",
		PathPattern:        "/flow/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowConfigOK), nil

}

/*
GetFlowMetrics gets all metrics for the flow from a particular node
*/
func (a *Client) GetFlowMetrics(params *GetFlowMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFlowMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowMetrics",
		Method:             "GET",
		PathPattern:        "/flow/metrics/{producer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowMetricsOK), nil

}

/*
GetFlows gets the flows from the specified registry and bucket for the current user
*/
func (a *Client) GetFlows(params *GetFlowsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFlowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlows",
		Method:             "GET",
		PathPattern:        "/flow/registries/{registry-id}/buckets/{bucket-id}/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowsOK), nil

}

/*
GetInputPortStatus gets status for an input port
*/
func (a *Client) GetInputPortStatus(params *GetInputPortStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetInputPortStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInputPortStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInputPortStatus",
		Method:             "GET",
		PathPattern:        "/flow/input-ports/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInputPortStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInputPortStatusOK), nil

}

/*
GetOutputPortStatus gets status for an output port
*/
func (a *Client) GetOutputPortStatus(params *GetOutputPortStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetOutputPortStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputPortStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutputPortStatus",
		Method:             "GET",
		PathPattern:        "/flow/output-ports/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOutputPortStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutputPortStatusOK), nil

}

/*
GetParameterContexts gets all parameter contexts
*/
func (a *Client) GetParameterContexts(params *GetParameterContextsParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterContextsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterContextsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameterContexts",
		Method:             "GET",
		PathPattern:        "/flow/parameter-contexts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetParameterContextsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParameterContextsOK), nil

}

/*
GetPrioritizers retrieves the types of prioritizers that this ni fi supports

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetPrioritizers(params *GetPrioritizersParams, authInfo runtime.ClientAuthInfoWriter) (*GetPrioritizersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrioritizersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrioritizers",
		Method:             "GET",
		PathPattern:        "/flow/prioritizers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrioritizersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrioritizersOK), nil

}

/*
GetProcessGroupStatus gets the status for a process group

The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
*/
func (a *Client) GetProcessGroupStatus(params *GetProcessGroupStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessGroupStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessGroupStatus",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessGroupStatusOK), nil

}

/*
GetProcessGroupStatusHistory gets status history for a remote process group
*/
func (a *Client) GetProcessGroupStatusHistory(params *GetProcessGroupStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessGroupStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessGroupStatusHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessGroupStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/process-groups/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessGroupStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessGroupStatusHistoryOK), nil

}

/*
GetProcessorStatus gets status for a processor
*/
func (a *Client) GetProcessorStatus(params *GetProcessorStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessorStatus",
		Method:             "GET",
		PathPattern:        "/flow/processors/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessorStatusOK), nil

}

/*
GetProcessorStatusHistory gets status history for a processor
*/
func (a *Client) GetProcessorStatusHistory(params *GetProcessorStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorStatusHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessorStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/processors/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessorStatusHistoryOK), nil

}

/*
GetProcessorTypes retrieves the types of processors that this ni fi supports

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetProcessorTypes(params *GetProcessorTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessorTypes",
		Method:             "GET",
		PathPattern:        "/flow/processor-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessorTypesOK), nil

}

/*
GetRegistries gets the listing of available registries
*/
func (a *Client) GetRegistries(params *GetRegistriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistries",
		Method:             "GET",
		PathPattern:        "/flow/registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegistriesOK), nil

}

/*
GetRemoteProcessGroupStatus gets status for a remote process group
*/
func (a *Client) GetRemoteProcessGroupStatus(params *GetRemoteProcessGroupStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteProcessGroupStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRemoteProcessGroupStatus",
		Method:             "GET",
		PathPattern:        "/flow/remote-process-groups/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRemoteProcessGroupStatusOK), nil

}

/*
GetRemoteProcessGroupStatusHistory gets the status history
*/
func (a *Client) GetRemoteProcessGroupStatusHistory(params *GetRemoteProcessGroupStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteProcessGroupStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupStatusHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRemoteProcessGroupStatusHistory",
		Method:             "GET",
		PathPattern:        "/flow/remote-process-groups/{id}/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRemoteProcessGroupStatusHistoryOK), nil

}

/*
GetReportingTaskTypes retrieves the types of reporting tasks that this ni fi supports

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetReportingTaskTypes(params *GetReportingTaskTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetReportingTaskTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportingTaskTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportingTaskTypes",
		Method:             "GET",
		PathPattern:        "/flow/reporting-task-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReportingTaskTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportingTaskTypesOK), nil

}

/*
GetReportingTasks gets all reporting tasks
*/
func (a *Client) GetReportingTasks(params *GetReportingTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetReportingTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportingTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportingTasks",
		Method:             "GET",
		PathPattern:        "/flow/reporting-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReportingTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportingTasksOK), nil

}

/*
GetTemplates gets all templates
*/
func (a *Client) GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplates",
		Method:             "GET",
		PathPattern:        "/flow/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesOK), nil

}

/*
GetVersions gets the flow versions from the specified registry and bucket for the specified flow for the current user
*/
func (a *Client) GetVersions(params *GetVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVersions",
		Method:             "GET",
		PathPattern:        "/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVersionsOK), nil

}

/*
QueryHistory gets configuration history

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) QueryHistory(params *QueryHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*QueryHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queryHistory",
		Method:             "GET",
		PathPattern:        "/flow/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueryHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*QueryHistoryOK), nil

}

/*
ScheduleComponents schedules or unschedule components in the specified process group
*/
func (a *Client) ScheduleComponents(params *ScheduleComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduleComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduleComponents",
		Method:             "PUT",
		PathPattern:        "/flow/process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduleComponentsOK), nil

}

/*
SearchCluster searches the cluster for a node with the specified address

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) SearchCluster(params *SearchClusterParams, authInfo runtime.ClientAuthInfoWriter) (*SearchClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchCluster",
		Method:             "GET",
		PathPattern:        "/flow/cluster/search-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchClusterOK), nil

}

/*
SearchFlow performs a search against this ni fi using the specified search term

Only search results from authorized components will be returned.
*/
func (a *Client) SearchFlow(params *SearchFlowParams, authInfo runtime.ClientAuthInfoWriter) (*SearchFlowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchFlowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchFlow",
		Method:             "GET",
		PathPattern:        "/flow/search-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchFlowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchFlowOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
