// Code generated by go-swagger; DO NOT EDIT.

package flow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchClusterParams creates a new SearchClusterParams object
// with the default values initialized.
func NewSearchClusterParams() *SearchClusterParams {
	var ()
	return &SearchClusterParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchClusterParamsWithTimeout creates a new SearchClusterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchClusterParamsWithTimeout(timeout time.Duration) *SearchClusterParams {
	var ()
	return &SearchClusterParams{

		timeout: timeout,
	}
}

// NewSearchClusterParamsWithContext creates a new SearchClusterParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchClusterParamsWithContext(ctx context.Context) *SearchClusterParams {
	var ()
	return &SearchClusterParams{

		Context: ctx,
	}
}

// NewSearchClusterParamsWithHTTPClient creates a new SearchClusterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchClusterParamsWithHTTPClient(client *http.Client) *SearchClusterParams {
	var ()
	return &SearchClusterParams{
		HTTPClient: client,
	}
}

/*SearchClusterParams contains all the parameters to send to the API endpoint
for the search cluster operation typically these are written to a http.Request
*/
type SearchClusterParams struct {

	/*Q
	  Node address to search for.

	*/
	Q string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search cluster params
func (o *SearchClusterParams) WithTimeout(timeout time.Duration) *SearchClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search cluster params
func (o *SearchClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search cluster params
func (o *SearchClusterParams) WithContext(ctx context.Context) *SearchClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search cluster params
func (o *SearchClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search cluster params
func (o *SearchClusterParams) WithHTTPClient(client *http.Client) *SearchClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search cluster params
func (o *SearchClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQ adds the q to the search cluster params
func (o *SearchClusterParams) WithQ(q string) *SearchClusterParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the search cluster params
func (o *SearchClusterParams) SetQ(q string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *SearchClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {
		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
