// Code generated by go-swagger; DO NOT EDIT.

package input_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/swagger-nifi/models"
)

// InputPortsUpdateRunStatusReader is a Reader for the InputPortsUpdateRunStatus structure.
type InputPortsUpdateRunStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InputPortsUpdateRunStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewInputPortsUpdateRunStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewInputPortsUpdateRunStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewInputPortsUpdateRunStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewInputPortsUpdateRunStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewInputPortsUpdateRunStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewInputPortsUpdateRunStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInputPortsUpdateRunStatusOK creates a InputPortsUpdateRunStatusOK with default headers values
func NewInputPortsUpdateRunStatusOK() *InputPortsUpdateRunStatusOK {
	return &InputPortsUpdateRunStatusOK{}
}

/*InputPortsUpdateRunStatusOK handles this case with default header values.

successful operation
*/
type InputPortsUpdateRunStatusOK struct {
	Payload *models.ProcessorEntity
}

func (o *InputPortsUpdateRunStatusOK) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] inputPortsUpdateRunStatusOK  %+v", 200, o.Payload)
}

func (o *InputPortsUpdateRunStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProcessorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInputPortsUpdateRunStatusBadRequest creates a InputPortsUpdateRunStatusBadRequest with default headers values
func NewInputPortsUpdateRunStatusBadRequest() *InputPortsUpdateRunStatusBadRequest {
	return &InputPortsUpdateRunStatusBadRequest{}
}

/*InputPortsUpdateRunStatusBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type InputPortsUpdateRunStatusBadRequest struct {
}

func (o *InputPortsUpdateRunStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] inputPortsUpdateRunStatusBadRequest ", 400)
}

func (o *InputPortsUpdateRunStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInputPortsUpdateRunStatusUnauthorized creates a InputPortsUpdateRunStatusUnauthorized with default headers values
func NewInputPortsUpdateRunStatusUnauthorized() *InputPortsUpdateRunStatusUnauthorized {
	return &InputPortsUpdateRunStatusUnauthorized{}
}

/*InputPortsUpdateRunStatusUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type InputPortsUpdateRunStatusUnauthorized struct {
}

func (o *InputPortsUpdateRunStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] inputPortsUpdateRunStatusUnauthorized ", 401)
}

func (o *InputPortsUpdateRunStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInputPortsUpdateRunStatusForbidden creates a InputPortsUpdateRunStatusForbidden with default headers values
func NewInputPortsUpdateRunStatusForbidden() *InputPortsUpdateRunStatusForbidden {
	return &InputPortsUpdateRunStatusForbidden{}
}

/*InputPortsUpdateRunStatusForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type InputPortsUpdateRunStatusForbidden struct {
}

func (o *InputPortsUpdateRunStatusForbidden) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] inputPortsUpdateRunStatusForbidden ", 403)
}

func (o *InputPortsUpdateRunStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInputPortsUpdateRunStatusNotFound creates a InputPortsUpdateRunStatusNotFound with default headers values
func NewInputPortsUpdateRunStatusNotFound() *InputPortsUpdateRunStatusNotFound {
	return &InputPortsUpdateRunStatusNotFound{}
}

/*InputPortsUpdateRunStatusNotFound handles this case with default header values.

The specified resource could not be found.
*/
type InputPortsUpdateRunStatusNotFound struct {
}

func (o *InputPortsUpdateRunStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] inputPortsUpdateRunStatusNotFound ", 404)
}

func (o *InputPortsUpdateRunStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInputPortsUpdateRunStatusConflict creates a InputPortsUpdateRunStatusConflict with default headers values
func NewInputPortsUpdateRunStatusConflict() *InputPortsUpdateRunStatusConflict {
	return &InputPortsUpdateRunStatusConflict{}
}

/*InputPortsUpdateRunStatusConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type InputPortsUpdateRunStatusConflict struct {
}

func (o *InputPortsUpdateRunStatusConflict) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] inputPortsUpdateRunStatusConflict ", 409)
}

func (o *InputPortsUpdateRunStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
