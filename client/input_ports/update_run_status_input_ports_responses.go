// Code generated by go-swagger; DO NOT EDIT.

package input_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bjornm82/go-swagger-nifi/models"
)

// UpdateRunStatusInputPortsReader is a Reader for the UpdateRunStatusInputPorts structure.
type UpdateRunStatusInputPortsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRunStatusInputPortsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRunStatusInputPortsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRunStatusInputPortsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRunStatusInputPortsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRunStatusInputPortsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRunStatusInputPortsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRunStatusInputPortsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRunStatusInputPortsOK creates a UpdateRunStatusInputPortsOK with default headers values
func NewUpdateRunStatusInputPortsOK() *UpdateRunStatusInputPortsOK {
	return &UpdateRunStatusInputPortsOK{}
}

/*UpdateRunStatusInputPortsOK handles this case with default header values.

successful operation
*/
type UpdateRunStatusInputPortsOK struct {
	Payload *models.ProcessorEntity
}

func (o *UpdateRunStatusInputPortsOK) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] updateRunStatusInputPortsOK  %+v", 200, o.Payload)
}

func (o *UpdateRunStatusInputPortsOK) GetPayload() *models.ProcessorEntity {
	return o.Payload
}

func (o *UpdateRunStatusInputPortsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProcessorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunStatusInputPortsBadRequest creates a UpdateRunStatusInputPortsBadRequest with default headers values
func NewUpdateRunStatusInputPortsBadRequest() *UpdateRunStatusInputPortsBadRequest {
	return &UpdateRunStatusInputPortsBadRequest{}
}

/*UpdateRunStatusInputPortsBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateRunStatusInputPortsBadRequest struct {
}

func (o *UpdateRunStatusInputPortsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] updateRunStatusInputPortsBadRequest ", 400)
}

func (o *UpdateRunStatusInputPortsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusInputPortsUnauthorized creates a UpdateRunStatusInputPortsUnauthorized with default headers values
func NewUpdateRunStatusInputPortsUnauthorized() *UpdateRunStatusInputPortsUnauthorized {
	return &UpdateRunStatusInputPortsUnauthorized{}
}

/*UpdateRunStatusInputPortsUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type UpdateRunStatusInputPortsUnauthorized struct {
}

func (o *UpdateRunStatusInputPortsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] updateRunStatusInputPortsUnauthorized ", 401)
}

func (o *UpdateRunStatusInputPortsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusInputPortsForbidden creates a UpdateRunStatusInputPortsForbidden with default headers values
func NewUpdateRunStatusInputPortsForbidden() *UpdateRunStatusInputPortsForbidden {
	return &UpdateRunStatusInputPortsForbidden{}
}

/*UpdateRunStatusInputPortsForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type UpdateRunStatusInputPortsForbidden struct {
}

func (o *UpdateRunStatusInputPortsForbidden) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] updateRunStatusInputPortsForbidden ", 403)
}

func (o *UpdateRunStatusInputPortsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusInputPortsNotFound creates a UpdateRunStatusInputPortsNotFound with default headers values
func NewUpdateRunStatusInputPortsNotFound() *UpdateRunStatusInputPortsNotFound {
	return &UpdateRunStatusInputPortsNotFound{}
}

/*UpdateRunStatusInputPortsNotFound handles this case with default header values.

The specified resource could not be found.
*/
type UpdateRunStatusInputPortsNotFound struct {
}

func (o *UpdateRunStatusInputPortsNotFound) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] updateRunStatusInputPortsNotFound ", 404)
}

func (o *UpdateRunStatusInputPortsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusInputPortsConflict creates a UpdateRunStatusInputPortsConflict with default headers values
func NewUpdateRunStatusInputPortsConflict() *UpdateRunStatusInputPortsConflict {
	return &UpdateRunStatusInputPortsConflict{}
}

/*UpdateRunStatusInputPortsConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateRunStatusInputPortsConflict struct {
}

func (o *UpdateRunStatusInputPortsConflict) Error() string {
	return fmt.Sprintf("[PUT /input-ports/{id}/run-status][%d] updateRunStatusInputPortsConflict ", 409)
}

func (o *UpdateRunStatusInputPortsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
