// Code generated by go-swagger; DO NOT EDIT.

package parameter_contexts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new parameter contexts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for parameter contexts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateParameterContext creates a parameter context
*/
func (a *Client) CreateParameterContext(params *CreateParameterContextParams, authInfo runtime.ClientAuthInfoWriter) (*CreateParameterContextCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParameterContextParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createParameterContext",
		Method:             "POST",
		PathPattern:        "/parameter-contexts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateParameterContextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateParameterContextCreated), nil

}

/*
DeleteParameterContext deletes the parameter context with the given ID

Deletes the Parameter Context with the given ID.
*/
func (a *Client) DeleteParameterContext(params *DeleteParameterContextParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteParameterContextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParameterContextParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteParameterContext",
		Method:             "DELETE",
		PathPattern:        "/parameter-contexts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteParameterContextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteParameterContextOK), nil

}

/*
DeleteValidationRequest deletes the validation request with the given ID

Deletes the Validation Request with the given ID. After a request is created via a POST to /nifi-api/validation-contexts, it is expected that the client will properly clean up the request by DELETE'ing it, once the validation process has completed. If the request is deleted before the request completes, then the Validation request will finish the step that it is currently performing and then will cancel any subsequent steps.
*/
func (a *Client) DeleteValidationRequest(params *DeleteValidationRequestParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteValidationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteValidationRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteValidationRequest",
		Method:             "DELETE",
		PathPattern:        "/parameter-contexts/{contextId}/validation-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteValidationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteValidationRequestOK), nil

}

/*
GetParameterContext returns the parameter context with the given ID

Returns the Parameter Context with the given ID.
*/
func (a *Client) GetParameterContext(params *GetParameterContextParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterContextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterContextParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameterContext",
		Method:             "GET",
		PathPattern:        "/parameter-contexts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetParameterContextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParameterContextOK), nil

}

/*
GetParameterContextUpdate returns the update request with the given ID

Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /nifi-api/parameter-contexts, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures.
*/
func (a *Client) GetParameterContextUpdate(params *GetParameterContextUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterContextUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterContextUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameterContextUpdate",
		Method:             "GET",
		PathPattern:        "/parameter-contexts/{contextId}/update-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetParameterContextUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParameterContextUpdateOK), nil

}

/*
GetValidationRequest returns the validation request with the given ID

Returns the Validation Request with the given ID. Once a Validation Request has been created by performing a POST to /nifi-api/validation-contexts, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures.
*/
func (a *Client) GetValidationRequest(params *GetValidationRequestParams, authInfo runtime.ClientAuthInfoWriter) (*GetValidationRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetValidationRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getValidationRequest",
		Method:             "GET",
		PathPattern:        "/parameter-contexts/{contextId}/validation-requests/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetValidationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetValidationRequestOK), nil

}

/*
ParameterContextsDeleteUpdateRequest deletes the update request with the given ID

Deletes the Update Request with the given ID. After a request is created via a POST to /nifi-api/parameter-contexts/update-requests, it is expected that the client will properly clean up the request by DELETE'ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps.
*/
func (a *Client) ParameterContextsDeleteUpdateRequest(params *ParameterContextsDeleteUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter) (*ParameterContextsDeleteUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewParameterContextsDeleteUpdateRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "parameterContextsDeleteUpdateRequest",
		Method:             "DELETE",
		PathPattern:        "/parameter-contexts/{contextId}/update-requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ParameterContextsDeleteUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ParameterContextsDeleteUpdateRequestOK), nil

}

/*
SubmitParameterContextUpdate initiates the update request of a parameter context

This will initiate the process of updating a Parameter Context. Changing the value of a Parameter may require that one or more components be stopped and restarted, so this acttion may take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a ParameterContextUpdateRequestEntity, and the process of updating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-contexts/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-contexts/update-requests/{requestId}.
*/
func (a *Client) SubmitParameterContextUpdate(params *SubmitParameterContextUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SubmitParameterContextUpdateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitParameterContextUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitParameterContextUpdate",
		Method:             "POST",
		PathPattern:        "/parameter-contexts/{contextId}/update-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitParameterContextUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubmitParameterContextUpdateCreated), nil

}

/*
SubmitValidationRequest initiates a validation request to determine how the validity of components will change if a parameter context were to be updated

This will initiate the process of validating all components whose Process Group is bound to the specified Parameter Context. Performing validation against an arbitrary number of components may be expect and take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a ParameterContextValidationRequestEntity, and the process of validating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-contexts/validation-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-contexts/validation-requests/{requestId}.
*/
func (a *Client) SubmitValidationRequest(params *SubmitValidationRequestParams, authInfo runtime.ClientAuthInfoWriter) (*SubmitValidationRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitValidationRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitValidationRequest",
		Method:             "POST",
		PathPattern:        "/parameter-contexts/{contextId}/validation-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitValidationRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubmitValidationRequestCreated), nil

}

/*
UpdateParameterContext modifies a parameter context

This endpoint will update a Parameter Context to match the provided entity. However, this request will fail if any component is running and is referencing a Parameter in the Parameter Context. Generally, this endpoint is not called directly. Instead, an update request should be submitted by making a POST to the /parameter-contexts/update-requests endpoint. That endpoint will, in turn, call this endpoint.
*/
func (a *Client) UpdateParameterContext(params *UpdateParameterContextParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateParameterContextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateParameterContextParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateParameterContext",
		Method:             "PUT",
		PathPattern:        "/parameter-contexts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateParameterContextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateParameterContextOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
