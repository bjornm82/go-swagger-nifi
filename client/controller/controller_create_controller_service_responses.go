// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/swagger-nifi/models"
)

// ControllerCreateControllerServiceReader is a Reader for the ControllerCreateControllerService structure.
type ControllerCreateControllerServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ControllerCreateControllerServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewControllerCreateControllerServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewControllerCreateControllerServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewControllerCreateControllerServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewControllerCreateControllerServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewControllerCreateControllerServiceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewControllerCreateControllerServiceOK creates a ControllerCreateControllerServiceOK with default headers values
func NewControllerCreateControllerServiceOK() *ControllerCreateControllerServiceOK {
	return &ControllerCreateControllerServiceOK{}
}

/*ControllerCreateControllerServiceOK handles this case with default header values.

successful operation
*/
type ControllerCreateControllerServiceOK struct {
	Payload *models.ControllerServiceEntity
}

func (o *ControllerCreateControllerServiceOK) Error() string {
	return fmt.Sprintf("[POST /controller/controller-services][%d] controllerCreateControllerServiceOK  %+v", 200, o.Payload)
}

func (o *ControllerCreateControllerServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ControllerServiceEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewControllerCreateControllerServiceBadRequest creates a ControllerCreateControllerServiceBadRequest with default headers values
func NewControllerCreateControllerServiceBadRequest() *ControllerCreateControllerServiceBadRequest {
	return &ControllerCreateControllerServiceBadRequest{}
}

/*ControllerCreateControllerServiceBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ControllerCreateControllerServiceBadRequest struct {
}

func (o *ControllerCreateControllerServiceBadRequest) Error() string {
	return fmt.Sprintf("[POST /controller/controller-services][%d] controllerCreateControllerServiceBadRequest ", 400)
}

func (o *ControllerCreateControllerServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerCreateControllerServiceUnauthorized creates a ControllerCreateControllerServiceUnauthorized with default headers values
func NewControllerCreateControllerServiceUnauthorized() *ControllerCreateControllerServiceUnauthorized {
	return &ControllerCreateControllerServiceUnauthorized{}
}

/*ControllerCreateControllerServiceUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ControllerCreateControllerServiceUnauthorized struct {
}

func (o *ControllerCreateControllerServiceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /controller/controller-services][%d] controllerCreateControllerServiceUnauthorized ", 401)
}

func (o *ControllerCreateControllerServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerCreateControllerServiceForbidden creates a ControllerCreateControllerServiceForbidden with default headers values
func NewControllerCreateControllerServiceForbidden() *ControllerCreateControllerServiceForbidden {
	return &ControllerCreateControllerServiceForbidden{}
}

/*ControllerCreateControllerServiceForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ControllerCreateControllerServiceForbidden struct {
}

func (o *ControllerCreateControllerServiceForbidden) Error() string {
	return fmt.Sprintf("[POST /controller/controller-services][%d] controllerCreateControllerServiceForbidden ", 403)
}

func (o *ControllerCreateControllerServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewControllerCreateControllerServiceConflict creates a ControllerCreateControllerServiceConflict with default headers values
func NewControllerCreateControllerServiceConflict() *ControllerCreateControllerServiceConflict {
	return &ControllerCreateControllerServiceConflict{}
}

/*ControllerCreateControllerServiceConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ControllerCreateControllerServiceConflict struct {
}

func (o *ControllerCreateControllerServiceConflict) Error() string {
	return fmt.Sprintf("[POST /controller/controller-services][%d] controllerCreateControllerServiceConflict ", 409)
}

func (o *ControllerCreateControllerServiceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
