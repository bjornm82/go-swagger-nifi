// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ControllerCreateControllerService creates a new controller service
*/
func (a *Client) ControllerCreateControllerService(params *ControllerCreateControllerServiceParams, authInfo runtime.ClientAuthInfoWriter) (*ControllerCreateControllerServiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewControllerCreateControllerServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "controllerCreateControllerService",
		Method:             "POST",
		PathPattern:        "/controller/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ControllerCreateControllerServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ControllerCreateControllerServiceCreated), nil

}

/*
CreateBulletin creates a new bulletin
*/
func (a *Client) CreateBulletin(params *CreateBulletinParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBulletinCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBulletinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBulletin",
		Method:             "POST",
		PathPattern:        "/controller/bulletin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBulletinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBulletinCreated), nil

}

/*
CreateRegistryClient creates a new registry client
*/
func (a *Client) CreateRegistryClient(params *CreateRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegistryClientCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRegistryClient",
		Method:             "POST",
		PathPattern:        "/controller/registry-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRegistryClientCreated), nil

}

/*
CreateReportingTask creates a new reporting task
*/
func (a *Client) CreateReportingTask(params *CreateReportingTaskParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReportingTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReportingTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createReportingTask",
		Method:             "POST",
		PathPattern:        "/controller/reporting-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReportingTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateReportingTaskCreated), nil

}

/*
DeleteHistory purges history
*/
func (a *Client) DeleteHistory(params *DeleteHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHistory",
		Method:             "DELETE",
		PathPattern:        "/controller/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHistoryOK), nil

}

/*
DeleteNode removes a node from the cluster
*/
func (a *Client) DeleteNode(params *DeleteNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNode",
		Method:             "DELETE",
		PathPattern:        "/controller/cluster/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodeOK), nil

}

/*
DeleteRegistryClient deletes a registry client
*/
func (a *Client) DeleteRegistryClient(params *DeleteRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRegistryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRegistryClient",
		Method:             "DELETE",
		PathPattern:        "/controller/registry-clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRegistryClientOK), nil

}

/*
GetCluster gets the contents of the cluster

Returns the contents of the cluster including all nodes and their status.
*/
func (a *Client) GetCluster(params *GetClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCluster",
		Method:             "GET",
		PathPattern:        "/controller/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterOK), nil

}

/*
GetControllerConfig retrieves the configuration for this ni fi controller
*/
func (a *Client) GetControllerConfig(params *GetControllerConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerConfig",
		Method:             "GET",
		PathPattern:        "/controller/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetControllerConfigOK), nil

}

/*
GetNode gets a node in the cluster
*/
func (a *Client) GetNode(params *GetNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNode",
		Method:             "GET",
		PathPattern:        "/controller/cluster/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeOK), nil

}

/*
GetNodeStatusHistory gets status history for the node

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetNodeStatusHistory(params *GetNodeStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStatusHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeStatusHistory",
		Method:             "GET",
		PathPattern:        "/controller/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeStatusHistoryOK), nil

}

/*
GetRegistryClient gets a registry client
*/
func (a *Client) GetRegistryClient(params *GetRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistryClient",
		Method:             "GET",
		PathPattern:        "/controller/registry-clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegistryClientOK), nil

}

/*
GetRegistryClients gets the listing of available registry clients
*/
func (a *Client) GetRegistryClients(params *GetRegistryClientsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistryClients",
		Method:             "GET",
		PathPattern:        "/controller/registry-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegistryClientsOK), nil

}

/*
UpdateControllerConfig retrieves the configuration for this ni fi
*/
func (a *Client) UpdateControllerConfig(params *UpdateControllerConfigParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateControllerConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateControllerConfig",
		Method:             "PUT",
		PathPattern:        "/controller/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateControllerConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateControllerConfigOK), nil

}

/*
UpdateNode updates a node in the cluster
*/
func (a *Client) UpdateNode(params *UpdateNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNode",
		Method:             "PUT",
		PathPattern:        "/controller/cluster/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNodeOK), nil

}

/*
UpdateRegistryClient updates a registry client
*/
func (a *Client) UpdateRegistryClient(params *UpdateRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRegistryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRegistryClient",
		Method:             "PUT",
		PathPattern:        "/controller/registry-clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRegistryClientOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
