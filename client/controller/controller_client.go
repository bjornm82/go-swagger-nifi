// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBulletin(params *CreateBulletinParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBulletinOK, error)

	CreateControllerServiceController(params *CreateControllerServiceControllerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateControllerServiceControllerOK, error)

	CreateRegistryClient(params *CreateRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegistryClientOK, error)

	CreateReportingTask(params *CreateReportingTaskParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReportingTaskOK, error)

	DeleteHistory(params *DeleteHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHistoryOK, error)

	DeleteNode(params *DeleteNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNodeOK, error)

	DeleteRegistryClient(params *DeleteRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRegistryClientOK, error)

	GetCluster(params *GetClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterOK, error)

	GetControllerConfig(params *GetControllerConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerConfigOK, error)

	GetNode(params *GetNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeOK, error)

	GetNodeStatusHistory(params *GetNodeStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStatusHistoryOK, error)

	GetRegistryClient(params *GetRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryClientOK, error)

	GetRegistryClients(params *GetRegistryClientsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryClientsOK, error)

	UpdateControllerConfig(params *UpdateControllerConfigParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerConfigOK, error)

	UpdateNode(params *UpdateNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodeOK, error)

	UpdateRegistryClient(params *UpdateRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRegistryClientOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateBulletin creates a new bulletin
*/
func (a *Client) CreateBulletin(params *CreateBulletinParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBulletinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBulletinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBulletin",
		Method:             "POST",
		PathPattern:        "/controller/bulletin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBulletinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBulletinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBulletin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateControllerServiceController creates a new controller service
*/
func (a *Client) CreateControllerServiceController(params *CreateControllerServiceControllerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateControllerServiceControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateControllerServiceControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createControllerServiceController",
		Method:             "POST",
		PathPattern:        "/controller/controller-services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateControllerServiceControllerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateControllerServiceControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createControllerServiceController: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRegistryClient creates a new registry client
*/
func (a *Client) CreateRegistryClient(params *CreateRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegistryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRegistryClient",
		Method:             "POST",
		PathPattern:        "/controller/registry-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRegistryClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRegistryClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateReportingTask creates a new reporting task
*/
func (a *Client) CreateReportingTask(params *CreateReportingTaskParams, authInfo runtime.ClientAuthInfoWriter) (*CreateReportingTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReportingTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createReportingTask",
		Method:             "POST",
		PathPattern:        "/controller/reporting-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReportingTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReportingTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReportingTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteHistory purges history
*/
func (a *Client) DeleteHistory(params *DeleteHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHistory",
		Method:             "DELETE",
		PathPattern:        "/controller/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNode removes a node from the cluster
*/
func (a *Client) DeleteNode(params *DeleteNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNode",
		Method:             "DELETE",
		PathPattern:        "/controller/cluster/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRegistryClient deletes a registry client
*/
func (a *Client) DeleteRegistryClient(params *DeleteRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRegistryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRegistryClient",
		Method:             "DELETE",
		PathPattern:        "/controller/registry-clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRegistryClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRegistryClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCluster gets the contents of the cluster

  Returns the contents of the cluster including all nodes and their status.
*/
func (a *Client) GetCluster(params *GetClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCluster",
		Method:             "GET",
		PathPattern:        "/controller/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetControllerConfig retrieves the configuration for this ni fi controller
*/
func (a *Client) GetControllerConfig(params *GetControllerConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getControllerConfig",
		Method:             "GET",
		PathPattern:        "/controller/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetControllerConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getControllerConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNode gets a node in the cluster
*/
func (a *Client) GetNode(params *GetNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNode",
		Method:             "GET",
		PathPattern:        "/controller/cluster/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeStatusHistory gets status history for the node

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetNodeStatusHistory(params *GetNodeStatusHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStatusHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStatusHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeStatusHistory",
		Method:             "GET",
		PathPattern:        "/controller/status/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeStatusHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeStatusHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeStatusHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegistryClient gets a registry client
*/
func (a *Client) GetRegistryClient(params *GetRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistryClient",
		Method:             "GET",
		PathPattern:        "/controller/registry-clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistryClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistryClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegistryClients gets the listing of available registry clients
*/
func (a *Client) GetRegistryClients(params *GetRegistryClientsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryClientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistryClients",
		Method:             "GET",
		PathPattern:        "/controller/registry-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegistryClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRegistryClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateControllerConfig retrieves the configuration for this ni fi
*/
func (a *Client) UpdateControllerConfig(params *UpdateControllerConfigParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateControllerConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateControllerConfig",
		Method:             "PUT",
		PathPattern:        "/controller/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateControllerConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateControllerConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateControllerConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNode updates a node in the cluster
*/
func (a *Client) UpdateNode(params *UpdateNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNode",
		Method:             "PUT",
		PathPattern:        "/controller/cluster/nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRegistryClient updates a registry client
*/
func (a *Client) UpdateRegistryClient(params *UpdateRegistryClientParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRegistryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRegistryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRegistryClient",
		Method:             "PUT",
		PathPattern:        "/controller/registry-clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRegistryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRegistryClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRegistryClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
