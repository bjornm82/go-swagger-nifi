// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteHistoryParams creates a new DeleteHistoryParams object
// with the default values initialized.
func NewDeleteHistoryParams() *DeleteHistoryParams {
	var ()
	return &DeleteHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteHistoryParamsWithTimeout creates a new DeleteHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteHistoryParamsWithTimeout(timeout time.Duration) *DeleteHistoryParams {
	var ()
	return &DeleteHistoryParams{

		timeout: timeout,
	}
}

// NewDeleteHistoryParamsWithContext creates a new DeleteHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteHistoryParamsWithContext(ctx context.Context) *DeleteHistoryParams {
	var ()
	return &DeleteHistoryParams{

		Context: ctx,
	}
}

// NewDeleteHistoryParamsWithHTTPClient creates a new DeleteHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteHistoryParamsWithHTTPClient(client *http.Client) *DeleteHistoryParams {
	var ()
	return &DeleteHistoryParams{
		HTTPClient: client,
	}
}

/*DeleteHistoryParams contains all the parameters to send to the API endpoint
for the delete history operation typically these are written to a http.Request
*/
type DeleteHistoryParams struct {

	/*EndDate
	  Purge actions before this date/time.

	*/
	EndDate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete history params
func (o *DeleteHistoryParams) WithTimeout(timeout time.Duration) *DeleteHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete history params
func (o *DeleteHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete history params
func (o *DeleteHistoryParams) WithContext(ctx context.Context) *DeleteHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete history params
func (o *DeleteHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete history params
func (o *DeleteHistoryParams) WithHTTPClient(client *http.Client) *DeleteHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete history params
func (o *DeleteHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the delete history params
func (o *DeleteHistoryParams) WithEndDate(endDate string) *DeleteHistoryParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the delete history params
func (o *DeleteHistoryParams) SetEndDate(endDate string) {
	o.EndDate = endDate
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endDate
	qrEndDate := o.EndDate
	qEndDate := qrEndDate
	if qEndDate != "" {
		if err := r.SetQueryParam("endDate", qEndDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
