// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/bjornm82/go-swagger-nifi/client/access"
	"github.com/bjornm82/go-swagger-nifi/client/accessoidc"
	"github.com/bjornm82/go-swagger-nifi/client/accesssaml"
	"github.com/bjornm82/go-swagger-nifi/client/connections"
	"github.com/bjornm82/go-swagger-nifi/client/controller"
	"github.com/bjornm82/go-swagger-nifi/client/controller_services"
	"github.com/bjornm82/go-swagger-nifi/client/counters"
	"github.com/bjornm82/go-swagger-nifi/client/data_transfer"
	"github.com/bjornm82/go-swagger-nifi/client/flow"
	"github.com/bjornm82/go-swagger-nifi/client/flowfile_queues"
	"github.com/bjornm82/go-swagger-nifi/client/funnel"
	"github.com/bjornm82/go-swagger-nifi/client/input_ports"
	"github.com/bjornm82/go-swagger-nifi/client/labels"
	"github.com/bjornm82/go-swagger-nifi/client/output_ports"
	"github.com/bjornm82/go-swagger-nifi/client/parameter_contexts"
	"github.com/bjornm82/go-swagger-nifi/client/policies"
	"github.com/bjornm82/go-swagger-nifi/client/process_groups"
	"github.com/bjornm82/go-swagger-nifi/client/processors"
	"github.com/bjornm82/go-swagger-nifi/client/provenance"
	"github.com/bjornm82/go-swagger-nifi/client/provenance_events"
	"github.com/bjornm82/go-swagger-nifi/client/remote_process_groups"
	"github.com/bjornm82/go-swagger-nifi/client/reporting_tasks"
	"github.com/bjornm82/go-swagger-nifi/client/resources"
	"github.com/bjornm82/go-swagger-nifi/client/site_to_site"
	"github.com/bjornm82/go-swagger-nifi/client/snippets"
	"github.com/bjornm82/go-swagger-nifi/client/system_diagnostics"
	"github.com/bjornm82/go-swagger-nifi/client/templates"
	"github.com/bjornm82/go-swagger-nifi/client/tenants"
	"github.com/bjornm82/go-swagger-nifi/client/versions"
)

// Default ni fi rest HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/nifi-api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new ni fi rest HTTP client.
func NewHTTPClient(formats strfmt.Registry) *NiFiRest {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new ni fi rest HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *NiFiRest {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new ni fi rest client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *NiFiRest {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(NiFiRest)
	cli.Transport = transport
	cli.Access = access.New(transport, formats)
	cli.Accessoidc = accessoidc.New(transport, formats)
	cli.Accesssaml = accesssaml.New(transport, formats)
	cli.Connections = connections.New(transport, formats)
	cli.Controller = controller.New(transport, formats)
	cli.ControllerServices = controller_services.New(transport, formats)
	cli.Counters = counters.New(transport, formats)
	cli.DataTransfer = data_transfer.New(transport, formats)
	cli.Flow = flow.New(transport, formats)
	cli.FlowfileQueues = flowfile_queues.New(transport, formats)
	cli.Funnel = funnel.New(transport, formats)
	cli.InputPorts = input_ports.New(transport, formats)
	cli.Labels = labels.New(transport, formats)
	cli.OutputPorts = output_ports.New(transport, formats)
	cli.ParameterContexts = parameter_contexts.New(transport, formats)
	cli.Policies = policies.New(transport, formats)
	cli.ProcessGroups = process_groups.New(transport, formats)
	cli.Processors = processors.New(transport, formats)
	cli.Provenance = provenance.New(transport, formats)
	cli.ProvenanceEvents = provenance_events.New(transport, formats)
	cli.RemoteProcessGroups = remote_process_groups.New(transport, formats)
	cli.ReportingTasks = reporting_tasks.New(transport, formats)
	cli.Resources = resources.New(transport, formats)
	cli.SiteToSite = site_to_site.New(transport, formats)
	cli.Snippets = snippets.New(transport, formats)
	cli.SystemDiagnostics = system_diagnostics.New(transport, formats)
	cli.Templates = templates.New(transport, formats)
	cli.Tenants = tenants.New(transport, formats)
	cli.Versions = versions.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// NiFiRest is a client for ni fi rest
type NiFiRest struct {
	Access access.ClientService

	Accessoidc accessoidc.ClientService

	Accesssaml accesssaml.ClientService

	Connections connections.ClientService

	Controller controller.ClientService

	ControllerServices controller_services.ClientService

	Counters counters.ClientService

	DataTransfer data_transfer.ClientService

	Flow flow.ClientService

	FlowfileQueues flowfile_queues.ClientService

	Funnel funnel.ClientService

	InputPorts input_ports.ClientService

	Labels labels.ClientService

	OutputPorts output_ports.ClientService

	ParameterContexts parameter_contexts.ClientService

	Policies policies.ClientService

	ProcessGroups process_groups.ClientService

	Processors processors.ClientService

	Provenance provenance.ClientService

	ProvenanceEvents provenance_events.ClientService

	RemoteProcessGroups remote_process_groups.ClientService

	ReportingTasks reporting_tasks.ClientService

	Resources resources.ClientService

	SiteToSite site_to_site.ClientService

	Snippets snippets.ClientService

	SystemDiagnostics system_diagnostics.ClientService

	Templates templates.ClientService

	Tenants tenants.ClientService

	Versions versions.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *NiFiRest) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Access.SetTransport(transport)
	c.Accessoidc.SetTransport(transport)
	c.Accesssaml.SetTransport(transport)
	c.Connections.SetTransport(transport)
	c.Controller.SetTransport(transport)
	c.ControllerServices.SetTransport(transport)
	c.Counters.SetTransport(transport)
	c.DataTransfer.SetTransport(transport)
	c.Flow.SetTransport(transport)
	c.FlowfileQueues.SetTransport(transport)
	c.Funnel.SetTransport(transport)
	c.InputPorts.SetTransport(transport)
	c.Labels.SetTransport(transport)
	c.OutputPorts.SetTransport(transport)
	c.ParameterContexts.SetTransport(transport)
	c.Policies.SetTransport(transport)
	c.ProcessGroups.SetTransport(transport)
	c.Processors.SetTransport(transport)
	c.Provenance.SetTransport(transport)
	c.ProvenanceEvents.SetTransport(transport)
	c.RemoteProcessGroups.SetTransport(transport)
	c.ReportingTasks.SetTransport(transport)
	c.Resources.SetTransport(transport)
	c.SiteToSite.SetTransport(transport)
	c.Snippets.SetTransport(transport)
	c.SystemDiagnostics.SetTransport(transport)
	c.Templates.SetTransport(transport)
	c.Tenants.SetTransport(transport)
	c.Versions.SetTransport(transport)
}
