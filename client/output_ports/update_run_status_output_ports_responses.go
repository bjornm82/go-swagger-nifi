// Code generated by go-swagger; DO NOT EDIT.

package output_ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bjornm82/go-swagger-nifi/models"
)

// UpdateRunStatusOutputPortsReader is a Reader for the UpdateRunStatusOutputPorts structure.
type UpdateRunStatusOutputPortsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRunStatusOutputPortsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRunStatusOutputPortsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRunStatusOutputPortsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRunStatusOutputPortsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRunStatusOutputPortsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRunStatusOutputPortsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateRunStatusOutputPortsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateRunStatusOutputPortsOK creates a UpdateRunStatusOutputPortsOK with default headers values
func NewUpdateRunStatusOutputPortsOK() *UpdateRunStatusOutputPortsOK {
	return &UpdateRunStatusOutputPortsOK{}
}

/*UpdateRunStatusOutputPortsOK handles this case with default header values.

successful operation
*/
type UpdateRunStatusOutputPortsOK struct {
	Payload *models.ProcessorEntity
}

func (o *UpdateRunStatusOutputPortsOK) Error() string {
	return fmt.Sprintf("[PUT /output-ports/{id}/run-status][%d] updateRunStatusOutputPortsOK  %+v", 200, o.Payload)
}

func (o *UpdateRunStatusOutputPortsOK) GetPayload() *models.ProcessorEntity {
	return o.Payload
}

func (o *UpdateRunStatusOutputPortsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProcessorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunStatusOutputPortsBadRequest creates a UpdateRunStatusOutputPortsBadRequest with default headers values
func NewUpdateRunStatusOutputPortsBadRequest() *UpdateRunStatusOutputPortsBadRequest {
	return &UpdateRunStatusOutputPortsBadRequest{}
}

/*UpdateRunStatusOutputPortsBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type UpdateRunStatusOutputPortsBadRequest struct {
}

func (o *UpdateRunStatusOutputPortsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /output-ports/{id}/run-status][%d] updateRunStatusOutputPortsBadRequest ", 400)
}

func (o *UpdateRunStatusOutputPortsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusOutputPortsUnauthorized creates a UpdateRunStatusOutputPortsUnauthorized with default headers values
func NewUpdateRunStatusOutputPortsUnauthorized() *UpdateRunStatusOutputPortsUnauthorized {
	return &UpdateRunStatusOutputPortsUnauthorized{}
}

/*UpdateRunStatusOutputPortsUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type UpdateRunStatusOutputPortsUnauthorized struct {
}

func (o *UpdateRunStatusOutputPortsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /output-ports/{id}/run-status][%d] updateRunStatusOutputPortsUnauthorized ", 401)
}

func (o *UpdateRunStatusOutputPortsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusOutputPortsForbidden creates a UpdateRunStatusOutputPortsForbidden with default headers values
func NewUpdateRunStatusOutputPortsForbidden() *UpdateRunStatusOutputPortsForbidden {
	return &UpdateRunStatusOutputPortsForbidden{}
}

/*UpdateRunStatusOutputPortsForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type UpdateRunStatusOutputPortsForbidden struct {
}

func (o *UpdateRunStatusOutputPortsForbidden) Error() string {
	return fmt.Sprintf("[PUT /output-ports/{id}/run-status][%d] updateRunStatusOutputPortsForbidden ", 403)
}

func (o *UpdateRunStatusOutputPortsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusOutputPortsNotFound creates a UpdateRunStatusOutputPortsNotFound with default headers values
func NewUpdateRunStatusOutputPortsNotFound() *UpdateRunStatusOutputPortsNotFound {
	return &UpdateRunStatusOutputPortsNotFound{}
}

/*UpdateRunStatusOutputPortsNotFound handles this case with default header values.

The specified resource could not be found.
*/
type UpdateRunStatusOutputPortsNotFound struct {
}

func (o *UpdateRunStatusOutputPortsNotFound) Error() string {
	return fmt.Sprintf("[PUT /output-ports/{id}/run-status][%d] updateRunStatusOutputPortsNotFound ", 404)
}

func (o *UpdateRunStatusOutputPortsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRunStatusOutputPortsConflict creates a UpdateRunStatusOutputPortsConflict with default headers values
func NewUpdateRunStatusOutputPortsConflict() *UpdateRunStatusOutputPortsConflict {
	return &UpdateRunStatusOutputPortsConflict{}
}

/*UpdateRunStatusOutputPortsConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type UpdateRunStatusOutputPortsConflict struct {
}

func (o *UpdateRunStatusOutputPortsConflict) Error() string {
	return fmt.Sprintf("[PUT /output-ports/{id}/run-status][%d] updateRunStatusOutputPortsConflict ", 409)
}

func (o *UpdateRunStatusOutputPortsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
