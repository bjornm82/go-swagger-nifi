// Code generated by go-swagger; DO NOT EDIT.

package provenance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new provenance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provenance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLineage deletes a lineage query
*/
func (a *Client) DeleteLineage(params *DeleteLineageParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteLineageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLineageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLineage",
		Method:             "DELETE",
		PathPattern:        "/provenance/lineage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLineageOK), nil

}

/*
DeleteProvenance deletes a provenance query
*/
func (a *Client) DeleteProvenance(params *DeleteProvenanceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProvenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvenanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProvenance",
		Method:             "DELETE",
		PathPattern:        "/provenance/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProvenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProvenanceOK), nil

}

/*
GetLineage gets a lineage query
*/
func (a *Client) GetLineage(params *GetLineageParams, authInfo runtime.ClientAuthInfoWriter) (*GetLineageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLineageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLineage",
		Method:             "GET",
		PathPattern:        "/provenance/lineage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLineageOK), nil

}

/*
GetProvenance gets a provenance query
*/
func (a *Client) GetProvenance(params *GetProvenanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvenanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvenanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvenance",
		Method:             "GET",
		PathPattern:        "/provenance/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProvenanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvenanceOK), nil

}

/*
GetSearchOptions gets the searchable attributes for provenance events
*/
func (a *Client) GetSearchOptions(params *GetSearchOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSearchOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSearchOptions",
		Method:             "GET",
		PathPattern:        "/provenance/search-options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSearchOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchOptionsOK), nil

}

/*
SubmitLineageRequest submits a lineage query

Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
*/
func (a *Client) SubmitLineageRequest(params *SubmitLineageRequestParams, authInfo runtime.ClientAuthInfoWriter) (*SubmitLineageRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitLineageRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitLineageRequest",
		Method:             "POST",
		PathPattern:        "/provenance/lineage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitLineageRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubmitLineageRequestOK), nil

}

/*
SubmitProvenanceRequest submits a provenance query

Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
*/
func (a *Client) SubmitProvenanceRequest(params *SubmitProvenanceRequestParams, authInfo runtime.ClientAuthInfoWriter) (*SubmitProvenanceRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitProvenanceRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitProvenanceRequest",
		Method:             "POST",
		PathPattern:        "/provenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitProvenanceRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubmitProvenanceRequestOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
