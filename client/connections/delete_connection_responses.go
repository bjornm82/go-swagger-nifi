// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bjornm82/go-swagger-nifi/models"
)

// DeleteConnectionReader is a Reader for the DeleteConnection structure.
type DeleteConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteConnectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteConnectionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteConnectionOK creates a DeleteConnectionOK with default headers values
func NewDeleteConnectionOK() *DeleteConnectionOK {
	return &DeleteConnectionOK{}
}

/*DeleteConnectionOK handles this case with default header values.

successful operation
*/
type DeleteConnectionOK struct {
	Payload *models.ConnectionEntity
}

func (o *DeleteConnectionOK) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionOK  %+v", 200, o.Payload)
}

func (o *DeleteConnectionOK) GetPayload() *models.ConnectionEntity {
	return o.Payload
}

func (o *DeleteConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteConnectionBadRequest creates a DeleteConnectionBadRequest with default headers values
func NewDeleteConnectionBadRequest() *DeleteConnectionBadRequest {
	return &DeleteConnectionBadRequest{}
}

/*DeleteConnectionBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type DeleteConnectionBadRequest struct {
}

func (o *DeleteConnectionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionBadRequest ", 400)
}

func (o *DeleteConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConnectionUnauthorized creates a DeleteConnectionUnauthorized with default headers values
func NewDeleteConnectionUnauthorized() *DeleteConnectionUnauthorized {
	return &DeleteConnectionUnauthorized{}
}

/*DeleteConnectionUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type DeleteConnectionUnauthorized struct {
}

func (o *DeleteConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionUnauthorized ", 401)
}

func (o *DeleteConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConnectionForbidden creates a DeleteConnectionForbidden with default headers values
func NewDeleteConnectionForbidden() *DeleteConnectionForbidden {
	return &DeleteConnectionForbidden{}
}

/*DeleteConnectionForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type DeleteConnectionForbidden struct {
}

func (o *DeleteConnectionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionForbidden ", 403)
}

func (o *DeleteConnectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConnectionNotFound creates a DeleteConnectionNotFound with default headers values
func NewDeleteConnectionNotFound() *DeleteConnectionNotFound {
	return &DeleteConnectionNotFound{}
}

/*DeleteConnectionNotFound handles this case with default header values.

The specified resource could not be found.
*/
type DeleteConnectionNotFound struct {
}

func (o *DeleteConnectionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionNotFound ", 404)
}

func (o *DeleteConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConnectionConflict creates a DeleteConnectionConflict with default headers values
func NewDeleteConnectionConflict() *DeleteConnectionConflict {
	return &DeleteConnectionConflict{}
}

/*DeleteConnectionConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type DeleteConnectionConflict struct {
}

func (o *DeleteConnectionConflict) Error() string {
	return fmt.Sprintf("[DELETE /connections/{id}][%d] deleteConnectionConflict ", 409)
}

func (o *DeleteConnectionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
