// Code generated by go-swagger; DO NOT EDIT.

package provenance_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new provenance events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provenance events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetInputContent gets the input content for a provenance event
*/
func (a *Client) GetInputContent(params *GetInputContentParams, authInfo runtime.ClientAuthInfoWriter) (*GetInputContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInputContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInputContent",
		Method:             "GET",
		PathPattern:        "/provenance-events/{id}/content/input",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetInputContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInputContentOK), nil

}

/*
GetOutputContent gets the output content for a provenance event
*/
func (a *Client) GetOutputContent(params *GetOutputContentParams, authInfo runtime.ClientAuthInfoWriter) (*GetOutputContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutputContent",
		Method:             "GET",
		PathPattern:        "/provenance-events/{id}/content/output",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOutputContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutputContentOK), nil

}

/*
GetProvenanceEvent gets a provenance event
*/
func (a *Client) GetProvenanceEvent(params *GetProvenanceEventParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvenanceEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvenanceEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvenanceEvent",
		Method:             "GET",
		PathPattern:        "/provenance-events/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProvenanceEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvenanceEventOK), nil

}

/*
SubmitReplay replays content from a provenance event
*/
func (a *Client) SubmitReplay(params *SubmitReplayParams, authInfo runtime.ClientAuthInfoWriter) (*SubmitReplayCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitReplayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "submitReplay",
		Method:             "POST",
		PathPattern:        "/provenance-events/replays",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitReplayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubmitReplayCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
