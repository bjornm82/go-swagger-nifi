// Code generated by go-swagger; DO NOT EDIT.

package remote_process_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new remote process groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for remote process groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetRemoteProcessGroup(params *GetRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteProcessGroupOK, error)

	GetStateRemoteProcessGroups(params *GetStateRemoteProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStateRemoteProcessGroupsOK, error)

	RemoveRemoteProcessGroup(params *RemoveRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveRemoteProcessGroupOK, error)

	UpdateRemoteProcessGroup(params *UpdateRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOK, error)

	UpdateRemoteProcessGroupInputPort(params *UpdateRemoteProcessGroupInputPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupInputPortOK, error)

	UpdateRemoteProcessGroupInputPortRunStatus(params *UpdateRemoteProcessGroupInputPortRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupInputPortRunStatusOK, error)

	UpdateRemoteProcessGroupOutputPort(params *UpdateRemoteProcessGroupOutputPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOutputPortOK, error)

	UpdateRemoteProcessGroupOutputPortRunStatus(params *UpdateRemoteProcessGroupOutputPortRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOutputPortRunStatusOK, error)

	UpdateRemoteProcessGroupRunStatus(params *UpdateRemoteProcessGroupRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupRunStatusOK, error)

	UpdateRemoteProcessGroupRunStatuses(params *UpdateRemoteProcessGroupRunStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupRunStatusesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetRemoteProcessGroup gets a remote process group
*/
func (a *Client) GetRemoteProcessGroup(params *GetRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRemoteProcessGroup",
		Method:             "GET",
		PathPattern:        "/remote-process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRemoteProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRemoteProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStateRemoteProcessGroups gets the state for a remote process group
*/
func (a *Client) GetStateRemoteProcessGroups(params *GetStateRemoteProcessGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStateRemoteProcessGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStateRemoteProcessGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStateRemoteProcessGroups",
		Method:             "GET",
		PathPattern:        "/remote-process-groups/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStateRemoteProcessGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStateRemoteProcessGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStateRemoteProcessGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveRemoteProcessGroup deletes a remote process group
*/
func (a *Client) RemoveRemoteProcessGroup(params *RemoveRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveRemoteProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeRemoteProcessGroup",
		Method:             "DELETE",
		PathPattern:        "/remote-process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveRemoteProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeRemoteProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteProcessGroup updates a remote process group
*/
func (a *Client) UpdateRemoteProcessGroup(params *UpdateRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroup",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteProcessGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRemoteProcessGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteProcessGroupInputPort updates a remote port

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupInputPort(params *UpdateRemoteProcessGroupInputPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupInputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupInputPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupInputPort",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/input-ports/{port-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupInputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteProcessGroupInputPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRemoteProcessGroupInputPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteProcessGroupInputPortRunStatus updates run status of a remote port

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupInputPortRunStatus(params *UpdateRemoteProcessGroupInputPortRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupInputPortRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupInputPortRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupInputPortRunStatus",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/input-ports/{port-id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupInputPortRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteProcessGroupInputPortRunStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRemoteProcessGroupInputPortRunStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteProcessGroupOutputPort updates a remote port

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupOutputPort(params *UpdateRemoteProcessGroupOutputPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOutputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupOutputPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupOutputPort",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/output-ports/{port-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupOutputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteProcessGroupOutputPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRemoteProcessGroupOutputPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteProcessGroupOutputPortRunStatus updates run status of a remote port

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupOutputPortRunStatus(params *UpdateRemoteProcessGroupOutputPortRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOutputPortRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupOutputPortRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupOutputPortRunStatus",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/output-ports/{port-id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupOutputPortRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteProcessGroupOutputPortRunStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRemoteProcessGroupOutputPortRunStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteProcessGroupRunStatus updates run status of a remote process group
*/
func (a *Client) UpdateRemoteProcessGroupRunStatus(params *UpdateRemoteProcessGroupRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupRunStatus",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteProcessGroupRunStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRemoteProcessGroupRunStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRemoteProcessGroupRunStatuses updates run status of all remote process groups in a process group recursively
*/
func (a *Client) UpdateRemoteProcessGroupRunStatuses(params *UpdateRemoteProcessGroupRunStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupRunStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupRunStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupRunStatuses",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/process-group/{id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupRunStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRemoteProcessGroupRunStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRemoteProcessGroupRunStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
