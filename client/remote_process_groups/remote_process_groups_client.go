// Code generated by go-swagger; DO NOT EDIT.

package remote_process_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new remote process groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for remote process groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetRemoteProcessGroup gets a remote process group
*/
func (a *Client) GetRemoteProcessGroup(params *GetRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRemoteProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRemoteProcessGroup",
		Method:             "GET",
		PathPattern:        "/remote-process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRemoteProcessGroupOK), nil

}

/*
RemoteProcessGroupsGetState gets the state for a remote process group
*/
func (a *Client) RemoteProcessGroupsGetState(params *RemoteProcessGroupsGetStateParams, authInfo runtime.ClientAuthInfoWriter) (*RemoteProcessGroupsGetStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoteProcessGroupsGetStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "remoteProcessGroupsGetState",
		Method:             "GET",
		PathPattern:        "/remote-process-groups/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoteProcessGroupsGetStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoteProcessGroupsGetStateOK), nil

}

/*
RemoveRemoteProcessGroup deletes a remote process group
*/
func (a *Client) RemoveRemoteProcessGroup(params *RemoveRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveRemoteProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeRemoteProcessGroup",
		Method:             "DELETE",
		PathPattern:        "/remote-process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveRemoteProcessGroupOK), nil

}

/*
UpdateRemoteProcessGroup updates a remote process group
*/
func (a *Client) UpdateRemoteProcessGroup(params *UpdateRemoteProcessGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroup",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRemoteProcessGroupOK), nil

}

/*
UpdateRemoteProcessGroupInputPort updates a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupInputPort(params *UpdateRemoteProcessGroupInputPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupInputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupInputPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupInputPort",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/input-ports/{port-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupInputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRemoteProcessGroupInputPortOK), nil

}

/*
UpdateRemoteProcessGroupInputPortRunStatus updates run status of a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupInputPortRunStatus(params *UpdateRemoteProcessGroupInputPortRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupInputPortRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupInputPortRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupInputPortRunStatus",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/input-ports/{port-id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupInputPortRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRemoteProcessGroupInputPortRunStatusOK), nil

}

/*
UpdateRemoteProcessGroupOutputPort updates a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupOutputPort(params *UpdateRemoteProcessGroupOutputPortParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOutputPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupOutputPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupOutputPort",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/output-ports/{port-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupOutputPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRemoteProcessGroupOutputPortOK), nil

}

/*
UpdateRemoteProcessGroupOutputPortRunStatus updates run status of a remote port

Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) UpdateRemoteProcessGroupOutputPortRunStatus(params *UpdateRemoteProcessGroupOutputPortRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupOutputPortRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupOutputPortRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupOutputPortRunStatus",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/output-ports/{port-id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupOutputPortRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRemoteProcessGroupOutputPortRunStatusOK), nil

}

/*
UpdateRemoteProcessGroupRunStatus updates run status of a remote process group
*/
func (a *Client) UpdateRemoteProcessGroupRunStatus(params *UpdateRemoteProcessGroupRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRemoteProcessGroupRunStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRemoteProcessGroupRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRemoteProcessGroupRunStatus",
		Method:             "PUT",
		PathPattern:        "/remote-process-groups/{id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRemoteProcessGroupRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRemoteProcessGroupRunStatusOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
