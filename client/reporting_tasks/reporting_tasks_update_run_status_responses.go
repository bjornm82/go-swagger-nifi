// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/swagger-nifi/models"
)

// ReportingTasksUpdateRunStatusReader is a Reader for the ReportingTasksUpdateRunStatus structure.
type ReportingTasksUpdateRunStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReportingTasksUpdateRunStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReportingTasksUpdateRunStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReportingTasksUpdateRunStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReportingTasksUpdateRunStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReportingTasksUpdateRunStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReportingTasksUpdateRunStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReportingTasksUpdateRunStatusConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReportingTasksUpdateRunStatusOK creates a ReportingTasksUpdateRunStatusOK with default headers values
func NewReportingTasksUpdateRunStatusOK() *ReportingTasksUpdateRunStatusOK {
	return &ReportingTasksUpdateRunStatusOK{}
}

/*ReportingTasksUpdateRunStatusOK handles this case with default header values.

successful operation
*/
type ReportingTasksUpdateRunStatusOK struct {
	Payload *models.ReportingTaskEntity
}

func (o *ReportingTasksUpdateRunStatusOK) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] reportingTasksUpdateRunStatusOK  %+v", 200, o.Payload)
}

func (o *ReportingTasksUpdateRunStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportingTaskEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportingTasksUpdateRunStatusBadRequest creates a ReportingTasksUpdateRunStatusBadRequest with default headers values
func NewReportingTasksUpdateRunStatusBadRequest() *ReportingTasksUpdateRunStatusBadRequest {
	return &ReportingTasksUpdateRunStatusBadRequest{}
}

/*ReportingTasksUpdateRunStatusBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ReportingTasksUpdateRunStatusBadRequest struct {
}

func (o *ReportingTasksUpdateRunStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] reportingTasksUpdateRunStatusBadRequest ", 400)
}

func (o *ReportingTasksUpdateRunStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksUpdateRunStatusUnauthorized creates a ReportingTasksUpdateRunStatusUnauthorized with default headers values
func NewReportingTasksUpdateRunStatusUnauthorized() *ReportingTasksUpdateRunStatusUnauthorized {
	return &ReportingTasksUpdateRunStatusUnauthorized{}
}

/*ReportingTasksUpdateRunStatusUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ReportingTasksUpdateRunStatusUnauthorized struct {
}

func (o *ReportingTasksUpdateRunStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] reportingTasksUpdateRunStatusUnauthorized ", 401)
}

func (o *ReportingTasksUpdateRunStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksUpdateRunStatusForbidden creates a ReportingTasksUpdateRunStatusForbidden with default headers values
func NewReportingTasksUpdateRunStatusForbidden() *ReportingTasksUpdateRunStatusForbidden {
	return &ReportingTasksUpdateRunStatusForbidden{}
}

/*ReportingTasksUpdateRunStatusForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ReportingTasksUpdateRunStatusForbidden struct {
}

func (o *ReportingTasksUpdateRunStatusForbidden) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] reportingTasksUpdateRunStatusForbidden ", 403)
}

func (o *ReportingTasksUpdateRunStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksUpdateRunStatusNotFound creates a ReportingTasksUpdateRunStatusNotFound with default headers values
func NewReportingTasksUpdateRunStatusNotFound() *ReportingTasksUpdateRunStatusNotFound {
	return &ReportingTasksUpdateRunStatusNotFound{}
}

/*ReportingTasksUpdateRunStatusNotFound handles this case with default header values.

The specified resource could not be found.
*/
type ReportingTasksUpdateRunStatusNotFound struct {
}

func (o *ReportingTasksUpdateRunStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] reportingTasksUpdateRunStatusNotFound ", 404)
}

func (o *ReportingTasksUpdateRunStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksUpdateRunStatusConflict creates a ReportingTasksUpdateRunStatusConflict with default headers values
func NewReportingTasksUpdateRunStatusConflict() *ReportingTasksUpdateRunStatusConflict {
	return &ReportingTasksUpdateRunStatusConflict{}
}

/*ReportingTasksUpdateRunStatusConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ReportingTasksUpdateRunStatusConflict struct {
}

func (o *ReportingTasksUpdateRunStatusConflict) Error() string {
	return fmt.Sprintf("[PUT /reporting-tasks/{id}/run-status][%d] reportingTasksUpdateRunStatusConflict ", 409)
}

func (o *ReportingTasksUpdateRunStatusConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
