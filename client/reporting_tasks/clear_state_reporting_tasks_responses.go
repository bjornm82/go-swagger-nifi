// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/bjornm82/go-swagger-nifi/models"
)

// ClearStateReportingTasksReader is a Reader for the ClearStateReportingTasks structure.
type ClearStateReportingTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClearStateReportingTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewClearStateReportingTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewClearStateReportingTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewClearStateReportingTasksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewClearStateReportingTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewClearStateReportingTasksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewClearStateReportingTasksConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewClearStateReportingTasksOK creates a ClearStateReportingTasksOK with default headers values
func NewClearStateReportingTasksOK() *ClearStateReportingTasksOK {
	return &ClearStateReportingTasksOK{}
}

/*ClearStateReportingTasksOK handles this case with default header values.

successful operation
*/
type ClearStateReportingTasksOK struct {
	Payload *models.ComponentStateEntity
}

func (o *ClearStateReportingTasksOK) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] clearStateReportingTasksOK  %+v", 200, o.Payload)
}

func (o *ClearStateReportingTasksOK) GetPayload() *models.ComponentStateEntity {
	return o.Payload
}

func (o *ClearStateReportingTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ComponentStateEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClearStateReportingTasksBadRequest creates a ClearStateReportingTasksBadRequest with default headers values
func NewClearStateReportingTasksBadRequest() *ClearStateReportingTasksBadRequest {
	return &ClearStateReportingTasksBadRequest{}
}

/*ClearStateReportingTasksBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ClearStateReportingTasksBadRequest struct {
}

func (o *ClearStateReportingTasksBadRequest) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] clearStateReportingTasksBadRequest ", 400)
}

func (o *ClearStateReportingTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearStateReportingTasksUnauthorized creates a ClearStateReportingTasksUnauthorized with default headers values
func NewClearStateReportingTasksUnauthorized() *ClearStateReportingTasksUnauthorized {
	return &ClearStateReportingTasksUnauthorized{}
}

/*ClearStateReportingTasksUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ClearStateReportingTasksUnauthorized struct {
}

func (o *ClearStateReportingTasksUnauthorized) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] clearStateReportingTasksUnauthorized ", 401)
}

func (o *ClearStateReportingTasksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearStateReportingTasksForbidden creates a ClearStateReportingTasksForbidden with default headers values
func NewClearStateReportingTasksForbidden() *ClearStateReportingTasksForbidden {
	return &ClearStateReportingTasksForbidden{}
}

/*ClearStateReportingTasksForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ClearStateReportingTasksForbidden struct {
}

func (o *ClearStateReportingTasksForbidden) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] clearStateReportingTasksForbidden ", 403)
}

func (o *ClearStateReportingTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearStateReportingTasksNotFound creates a ClearStateReportingTasksNotFound with default headers values
func NewClearStateReportingTasksNotFound() *ClearStateReportingTasksNotFound {
	return &ClearStateReportingTasksNotFound{}
}

/*ClearStateReportingTasksNotFound handles this case with default header values.

The specified resource could not be found.
*/
type ClearStateReportingTasksNotFound struct {
}

func (o *ClearStateReportingTasksNotFound) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] clearStateReportingTasksNotFound ", 404)
}

func (o *ClearStateReportingTasksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearStateReportingTasksConflict creates a ClearStateReportingTasksConflict with default headers values
func NewClearStateReportingTasksConflict() *ClearStateReportingTasksConflict {
	return &ClearStateReportingTasksConflict{}
}

/*ClearStateReportingTasksConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ClearStateReportingTasksConflict struct {
}

func (o *ClearStateReportingTasksConflict) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] clearStateReportingTasksConflict ", 409)
}

func (o *ClearStateReportingTasksConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
