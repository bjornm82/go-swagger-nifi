// Code generated by go-swagger; DO NOT EDIT.

package reporting_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/go-swagger-nifi/models"
)

// ReportingTasksClearStateReader is a Reader for the ReportingTasksClearState structure.
type ReportingTasksClearStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReportingTasksClearStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewReportingTasksClearStateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReportingTasksClearStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReportingTasksClearStateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReportingTasksClearStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReportingTasksClearStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReportingTasksClearStateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReportingTasksClearStateCreated creates a ReportingTasksClearStateCreated with default headers values
func NewReportingTasksClearStateCreated() *ReportingTasksClearStateCreated {
	return &ReportingTasksClearStateCreated{}
}

/*ReportingTasksClearStateCreated handles this case with default header values.

successful operation
*/
type ReportingTasksClearStateCreated struct {
	Payload *models.ComponentStateEntity
}

func (o *ReportingTasksClearStateCreated) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] reportingTasksClearStateCreated  %+v", 201, o.Payload)
}

func (o *ReportingTasksClearStateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ComponentStateEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportingTasksClearStateBadRequest creates a ReportingTasksClearStateBadRequest with default headers values
func NewReportingTasksClearStateBadRequest() *ReportingTasksClearStateBadRequest {
	return &ReportingTasksClearStateBadRequest{}
}

/*ReportingTasksClearStateBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ReportingTasksClearStateBadRequest struct {
}

func (o *ReportingTasksClearStateBadRequest) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] reportingTasksClearStateBadRequest ", 400)
}

func (o *ReportingTasksClearStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksClearStateUnauthorized creates a ReportingTasksClearStateUnauthorized with default headers values
func NewReportingTasksClearStateUnauthorized() *ReportingTasksClearStateUnauthorized {
	return &ReportingTasksClearStateUnauthorized{}
}

/*ReportingTasksClearStateUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ReportingTasksClearStateUnauthorized struct {
}

func (o *ReportingTasksClearStateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] reportingTasksClearStateUnauthorized ", 401)
}

func (o *ReportingTasksClearStateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksClearStateForbidden creates a ReportingTasksClearStateForbidden with default headers values
func NewReportingTasksClearStateForbidden() *ReportingTasksClearStateForbidden {
	return &ReportingTasksClearStateForbidden{}
}

/*ReportingTasksClearStateForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ReportingTasksClearStateForbidden struct {
}

func (o *ReportingTasksClearStateForbidden) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] reportingTasksClearStateForbidden ", 403)
}

func (o *ReportingTasksClearStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksClearStateNotFound creates a ReportingTasksClearStateNotFound with default headers values
func NewReportingTasksClearStateNotFound() *ReportingTasksClearStateNotFound {
	return &ReportingTasksClearStateNotFound{}
}

/*ReportingTasksClearStateNotFound handles this case with default header values.

The specified resource could not be found.
*/
type ReportingTasksClearStateNotFound struct {
}

func (o *ReportingTasksClearStateNotFound) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] reportingTasksClearStateNotFound ", 404)
}

func (o *ReportingTasksClearStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReportingTasksClearStateConflict creates a ReportingTasksClearStateConflict with default headers values
func NewReportingTasksClearStateConflict() *ReportingTasksClearStateConflict {
	return &ReportingTasksClearStateConflict{}
}

/*ReportingTasksClearStateConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ReportingTasksClearStateConflict struct {
}

func (o *ReportingTasksClearStateConflict) Error() string {
	return fmt.Sprintf("[POST /reporting-tasks/{id}/state/clear-requests][%d] reportingTasksClearStateConflict ", 409)
}

func (o *ReportingTasksClearStateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
