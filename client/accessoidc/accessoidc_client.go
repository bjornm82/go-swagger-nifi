// Code generated by go-swagger; DO NOT EDIT.

package accessoidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new accessoidc API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accessoidc API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAccessTokenFromTicketOidc(params *CreateAccessTokenFromTicketOidcParams) (*CreateAccessTokenFromTicketOidcCreated, error)

	CreateAccessTokenOidc(params *CreateAccessTokenOidcParams) (*CreateAccessTokenOidcCreated, error)

	CreateDownloadTokenOidc(params *CreateDownloadTokenOidcParams) (*CreateDownloadTokenOidcCreated, error)

	CreateUIExtensionTokenOidc(params *CreateUIExtensionTokenOidcParams) (*CreateUIExtensionTokenOidcCreated, error)

	GetAccessStatusOidc(params *GetAccessStatusOidcParams) (*GetAccessStatusOidcOK, error)

	GetLoginConfigOidc(params *GetLoginConfigOidcParams) (*GetLoginConfigOidcOK, error)

	KnoxCallbackOidc(params *KnoxCallbackOidcParams) error

	KnoxLogoutOidc(params *KnoxLogoutOidcParams) error

	KnoxRequestOidc(params *KnoxRequestOidcParams) error

	LogOutCompleteOidc(params *LogOutCompleteOidcParams) (*LogOutCompleteOidcOK, error)

	LogOutOidc(params *LogOutOidcParams) (*LogOutOidcOK, error)

	OidcCallback(params *OidcCallbackParams) error

	OidcExchange(params *OidcExchangeParams) (*OidcExchangeCreated, error)

	OidcLogout(params *OidcLogoutParams) error

	OidcLogoutCallback(params *OidcLogoutCallbackParams) error

	OidcRequest(params *OidcRequestParams) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAccessTokenFromTicketOidc creates a token for accessing the r e s t API via kerberos ticket exchange s p n e g o negotiation

  The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'. It is also stored in the browser as a cookie.
*/
func (a *Client) CreateAccessTokenFromTicketOidc(params *CreateAccessTokenFromTicketOidcParams) (*CreateAccessTokenFromTicketOidcCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccessTokenFromTicketOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAccessTokenFromTicketOidc",
		Method:             "POST",
		PathPattern:        "/access/oidc/kerberos",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAccessTokenFromTicketOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccessTokenFromTicketOidcCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAccessTokenFromTicketOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAccessTokenOidc creates a token for accessing the r e s t API via username password

  The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. It is stored in the browser as a cookie, but also returned inthe response body to be stored/used by third party client scripts.
*/
func (a *Client) CreateAccessTokenOidc(params *CreateAccessTokenOidcParams) (*CreateAccessTokenOidcCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccessTokenOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAccessTokenOidc",
		Method:             "POST",
		PathPattern:        "/access/oidc/token",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAccessTokenOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccessTokenOidcCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAccessTokenOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDownloadTokenOidc creates a single use access token for downloading flow file content

  The token returned is a base64 encoded string. It is valid for a single request up to five minutes from being issued. It is used as a query parameter name 'access_token'.
*/
func (a *Client) CreateDownloadTokenOidc(params *CreateDownloadTokenOidcParams) (*CreateDownloadTokenOidcCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDownloadTokenOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDownloadTokenOidc",
		Method:             "POST",
		PathPattern:        "/access/oidc/download-token",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDownloadTokenOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDownloadTokenOidcCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDownloadTokenOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUIExtensionTokenOidc creates a single use access token for accessing a ni fi UI extension

  The token returned is a base64 encoded string. It is valid for a single request up to five minutes from being issued. It is used as a query parameter name 'access_token'.
*/
func (a *Client) CreateUIExtensionTokenOidc(params *CreateUIExtensionTokenOidcParams) (*CreateUIExtensionTokenOidcCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUIExtensionTokenOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUiExtensionTokenOidc",
		Method:             "POST",
		PathPattern:        "/access/oidc/ui-extension-token",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateUIExtensionTokenOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUIExtensionTokenOidcCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUiExtensionTokenOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccessStatusOidc gets the status the client s access

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetAccessStatusOidc(params *GetAccessStatusOidcParams) (*GetAccessStatusOidcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessStatusOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessStatusOidc",
		Method:             "GET",
		PathPattern:        "/access/oidc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccessStatusOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessStatusOidcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccessStatusOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLoginConfigOidc retrieves the access configuration for this ni fi
*/
func (a *Client) GetLoginConfigOidc(params *GetLoginConfigOidcParams) (*GetLoginConfigOidcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoginConfigOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLoginConfigOidc",
		Method:             "GET",
		PathPattern:        "/access/oidc/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLoginConfigOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoginConfigOidcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoginConfigOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KnoxCallbackOidc redirects callback URI for processing the result of the apache knox login sequence

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) KnoxCallbackOidc(params *KnoxCallbackOidcParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKnoxCallbackOidcParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "knoxCallbackOidc",
		Method:             "GET",
		PathPattern:        "/access/oidc/knox/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KnoxCallbackOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  KnoxLogoutOidc performs a logout in the apache knox

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) KnoxLogoutOidc(params *KnoxLogoutOidcParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKnoxLogoutOidcParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "knoxLogoutOidc",
		Method:             "GET",
		PathPattern:        "/access/oidc/knox/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KnoxLogoutOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  KnoxRequestOidc initiates a request to authenticate through apache knox

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) KnoxRequestOidc(params *KnoxRequestOidcParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKnoxRequestOidcParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "knoxRequestOidc",
		Method:             "GET",
		PathPattern:        "/access/oidc/knox/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KnoxRequestOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  LogOutCompleteOidc completes the logout sequence by removing the cached logout request and cookie if they existed and redirects to nifi login

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) LogOutCompleteOidc(params *LogOutCompleteOidcParams) (*LogOutCompleteOidcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogOutCompleteOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "logOutCompleteOidc",
		Method:             "GET",
		PathPattern:        "/access/oidc/logout/complete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LogOutCompleteOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogOutCompleteOidcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for logOutCompleteOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LogOutOidc performs a logout for other providers that have been issued a j w t

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) LogOutOidc(params *LogOutOidcParams) (*LogOutOidcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogOutOidcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "logOutOidc",
		Method:             "DELETE",
		PathPattern:        "/access/oidc/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LogOutOidcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogOutOidcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for logOutOidc: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OidcCallback redirects callback URI for processing the result of the open Id connect login sequence

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcCallback(params *OidcCallbackParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcCallbackParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "oidcCallback",
		Method:             "GET",
		PathPattern:        "/access/oidc/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  OidcExchange retrieves a j w t following a successful login sequence using the configured open Id connect provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcExchange(params *OidcExchangeParams) (*OidcExchangeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcExchangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "oidcExchange",
		Method:             "POST",
		PathPattern:        "/access/oidc/exchange",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcExchangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OidcExchangeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for oidcExchange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OidcLogout performs a logout in the open Id provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcLogout(params *OidcLogoutParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcLogoutParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "oidcLogout",
		Method:             "GET",
		PathPattern:        "/access/oidc/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  OidcLogoutCallback redirects callback URI for processing the result of the open Id connect logout sequence

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcLogoutCallback(params *OidcLogoutCallbackParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcLogoutCallbackParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "oidcLogoutCallback",
		Method:             "GET",
		PathPattern:        "/access/oidc/logoutCallback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcLogoutCallbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  OidcRequest initiates a request to authenticate through the configured open Id connect provider

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) OidcRequest(params *OidcRequestParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOidcRequestParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "oidcRequest",
		Method:             "GET",
		PathPattern:        "/access/oidc/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OidcRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
