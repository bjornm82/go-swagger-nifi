// Code generated by go-swagger; DO NOT EDIT.

package labels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new labels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for labels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetLabel gets a label
*/
func (a *Client) GetLabel(params *GetLabelParams, authInfo runtime.ClientAuthInfoWriter) (*GetLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLabel",
		Method:             "GET",
		PathPattern:        "/labels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLabelOK), nil

}

/*
RemoveLabel deletes a label
*/
func (a *Client) RemoveLabel(params *RemoveLabelParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeLabel",
		Method:             "DELETE",
		PathPattern:        "/labels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveLabelOK), nil

}

/*
UpdateLabel updates a label
*/
func (a *Client) UpdateLabel(params *UpdateLabelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLabelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLabel",
		Method:             "PUT",
		PathPattern:        "/labels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateLabelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateLabelOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
