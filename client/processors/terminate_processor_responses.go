// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/go-swagger-nifi/models"
)

// TerminateProcessorReader is a Reader for the TerminateProcessor structure.
type TerminateProcessorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TerminateProcessorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTerminateProcessorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewTerminateProcessorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewTerminateProcessorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTerminateProcessorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTerminateProcessorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewTerminateProcessorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTerminateProcessorOK creates a TerminateProcessorOK with default headers values
func NewTerminateProcessorOK() *TerminateProcessorOK {
	return &TerminateProcessorOK{}
}

/*TerminateProcessorOK handles this case with default header values.

successful operation
*/
type TerminateProcessorOK struct {
	Payload *models.ProcessorEntity
}

func (o *TerminateProcessorOK) Error() string {
	return fmt.Sprintf("[DELETE /processors/{id}/threads][%d] terminateProcessorOK  %+v", 200, o.Payload)
}

func (o *TerminateProcessorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProcessorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTerminateProcessorBadRequest creates a TerminateProcessorBadRequest with default headers values
func NewTerminateProcessorBadRequest() *TerminateProcessorBadRequest {
	return &TerminateProcessorBadRequest{}
}

/*TerminateProcessorBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type TerminateProcessorBadRequest struct {
}

func (o *TerminateProcessorBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /processors/{id}/threads][%d] terminateProcessorBadRequest ", 400)
}

func (o *TerminateProcessorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTerminateProcessorUnauthorized creates a TerminateProcessorUnauthorized with default headers values
func NewTerminateProcessorUnauthorized() *TerminateProcessorUnauthorized {
	return &TerminateProcessorUnauthorized{}
}

/*TerminateProcessorUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type TerminateProcessorUnauthorized struct {
}

func (o *TerminateProcessorUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /processors/{id}/threads][%d] terminateProcessorUnauthorized ", 401)
}

func (o *TerminateProcessorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTerminateProcessorForbidden creates a TerminateProcessorForbidden with default headers values
func NewTerminateProcessorForbidden() *TerminateProcessorForbidden {
	return &TerminateProcessorForbidden{}
}

/*TerminateProcessorForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type TerminateProcessorForbidden struct {
}

func (o *TerminateProcessorForbidden) Error() string {
	return fmt.Sprintf("[DELETE /processors/{id}/threads][%d] terminateProcessorForbidden ", 403)
}

func (o *TerminateProcessorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTerminateProcessorNotFound creates a TerminateProcessorNotFound with default headers values
func NewTerminateProcessorNotFound() *TerminateProcessorNotFound {
	return &TerminateProcessorNotFound{}
}

/*TerminateProcessorNotFound handles this case with default header values.

The specified resource could not be found.
*/
type TerminateProcessorNotFound struct {
}

func (o *TerminateProcessorNotFound) Error() string {
	return fmt.Sprintf("[DELETE /processors/{id}/threads][%d] terminateProcessorNotFound ", 404)
}

func (o *TerminateProcessorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTerminateProcessorConflict creates a TerminateProcessorConflict with default headers values
func NewTerminateProcessorConflict() *TerminateProcessorConflict {
	return &TerminateProcessorConflict{}
}

/*TerminateProcessorConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type TerminateProcessorConflict struct {
}

func (o *TerminateProcessorConflict) Error() string {
	return fmt.Sprintf("[DELETE /processors/{id}/threads][%d] terminateProcessorConflict ", 409)
}

func (o *TerminateProcessorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
