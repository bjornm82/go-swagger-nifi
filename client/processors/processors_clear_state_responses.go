// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/go-swagger-nifi/models"
)

// ProcessorsClearStateReader is a Reader for the ProcessorsClearState structure.
type ProcessorsClearStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProcessorsClearStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewProcessorsClearStateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProcessorsClearStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewProcessorsClearStateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewProcessorsClearStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewProcessorsClearStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewProcessorsClearStateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProcessorsClearStateCreated creates a ProcessorsClearStateCreated with default headers values
func NewProcessorsClearStateCreated() *ProcessorsClearStateCreated {
	return &ProcessorsClearStateCreated{}
}

/*ProcessorsClearStateCreated handles this case with default header values.

successful operation
*/
type ProcessorsClearStateCreated struct {
	Payload *models.ComponentStateEntity
}

func (o *ProcessorsClearStateCreated) Error() string {
	return fmt.Sprintf("[POST /processors/{id}/state/clear-requests][%d] processorsClearStateCreated  %+v", 201, o.Payload)
}

func (o *ProcessorsClearStateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ComponentStateEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessorsClearStateBadRequest creates a ProcessorsClearStateBadRequest with default headers values
func NewProcessorsClearStateBadRequest() *ProcessorsClearStateBadRequest {
	return &ProcessorsClearStateBadRequest{}
}

/*ProcessorsClearStateBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ProcessorsClearStateBadRequest struct {
}

func (o *ProcessorsClearStateBadRequest) Error() string {
	return fmt.Sprintf("[POST /processors/{id}/state/clear-requests][%d] processorsClearStateBadRequest ", 400)
}

func (o *ProcessorsClearStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsClearStateUnauthorized creates a ProcessorsClearStateUnauthorized with default headers values
func NewProcessorsClearStateUnauthorized() *ProcessorsClearStateUnauthorized {
	return &ProcessorsClearStateUnauthorized{}
}

/*ProcessorsClearStateUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ProcessorsClearStateUnauthorized struct {
}

func (o *ProcessorsClearStateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /processors/{id}/state/clear-requests][%d] processorsClearStateUnauthorized ", 401)
}

func (o *ProcessorsClearStateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsClearStateForbidden creates a ProcessorsClearStateForbidden with default headers values
func NewProcessorsClearStateForbidden() *ProcessorsClearStateForbidden {
	return &ProcessorsClearStateForbidden{}
}

/*ProcessorsClearStateForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ProcessorsClearStateForbidden struct {
}

func (o *ProcessorsClearStateForbidden) Error() string {
	return fmt.Sprintf("[POST /processors/{id}/state/clear-requests][%d] processorsClearStateForbidden ", 403)
}

func (o *ProcessorsClearStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsClearStateNotFound creates a ProcessorsClearStateNotFound with default headers values
func NewProcessorsClearStateNotFound() *ProcessorsClearStateNotFound {
	return &ProcessorsClearStateNotFound{}
}

/*ProcessorsClearStateNotFound handles this case with default header values.

The specified resource could not be found.
*/
type ProcessorsClearStateNotFound struct {
}

func (o *ProcessorsClearStateNotFound) Error() string {
	return fmt.Sprintf("[POST /processors/{id}/state/clear-requests][%d] processorsClearStateNotFound ", 404)
}

func (o *ProcessorsClearStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsClearStateConflict creates a ProcessorsClearStateConflict with default headers values
func NewProcessorsClearStateConflict() *ProcessorsClearStateConflict {
	return &ProcessorsClearStateConflict{}
}

/*ProcessorsClearStateConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ProcessorsClearStateConflict struct {
}

func (o *ProcessorsClearStateConflict) Error() string {
	return fmt.Sprintf("[POST /processors/{id}/state/clear-requests][%d] processorsClearStateConflict ", 409)
}

func (o *ProcessorsClearStateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
