// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bjornm82/swagger-nifi/models"
)

// ProcessorsGetStateReader is a Reader for the ProcessorsGetState structure.
type ProcessorsGetStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProcessorsGetStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProcessorsGetStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProcessorsGetStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewProcessorsGetStateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewProcessorsGetStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewProcessorsGetStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewProcessorsGetStateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProcessorsGetStateOK creates a ProcessorsGetStateOK with default headers values
func NewProcessorsGetStateOK() *ProcessorsGetStateOK {
	return &ProcessorsGetStateOK{}
}

/*ProcessorsGetStateOK handles this case with default header values.

successful operation
*/
type ProcessorsGetStateOK struct {
	Payload *models.ComponentStateEntity
}

func (o *ProcessorsGetStateOK) Error() string {
	return fmt.Sprintf("[GET /processors/{id}/state][%d] processorsGetStateOK  %+v", 200, o.Payload)
}

func (o *ProcessorsGetStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ComponentStateEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProcessorsGetStateBadRequest creates a ProcessorsGetStateBadRequest with default headers values
func NewProcessorsGetStateBadRequest() *ProcessorsGetStateBadRequest {
	return &ProcessorsGetStateBadRequest{}
}

/*ProcessorsGetStateBadRequest handles this case with default header values.

NiFi was unable to complete the request because it was invalid. The request should not be retried without modification.
*/
type ProcessorsGetStateBadRequest struct {
}

func (o *ProcessorsGetStateBadRequest) Error() string {
	return fmt.Sprintf("[GET /processors/{id}/state][%d] processorsGetStateBadRequest ", 400)
}

func (o *ProcessorsGetStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsGetStateUnauthorized creates a ProcessorsGetStateUnauthorized with default headers values
func NewProcessorsGetStateUnauthorized() *ProcessorsGetStateUnauthorized {
	return &ProcessorsGetStateUnauthorized{}
}

/*ProcessorsGetStateUnauthorized handles this case with default header values.

Client could not be authenticated.
*/
type ProcessorsGetStateUnauthorized struct {
}

func (o *ProcessorsGetStateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /processors/{id}/state][%d] processorsGetStateUnauthorized ", 401)
}

func (o *ProcessorsGetStateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsGetStateForbidden creates a ProcessorsGetStateForbidden with default headers values
func NewProcessorsGetStateForbidden() *ProcessorsGetStateForbidden {
	return &ProcessorsGetStateForbidden{}
}

/*ProcessorsGetStateForbidden handles this case with default header values.

Client is not authorized to make this request.
*/
type ProcessorsGetStateForbidden struct {
}

func (o *ProcessorsGetStateForbidden) Error() string {
	return fmt.Sprintf("[GET /processors/{id}/state][%d] processorsGetStateForbidden ", 403)
}

func (o *ProcessorsGetStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsGetStateNotFound creates a ProcessorsGetStateNotFound with default headers values
func NewProcessorsGetStateNotFound() *ProcessorsGetStateNotFound {
	return &ProcessorsGetStateNotFound{}
}

/*ProcessorsGetStateNotFound handles this case with default header values.

The specified resource could not be found.
*/
type ProcessorsGetStateNotFound struct {
}

func (o *ProcessorsGetStateNotFound) Error() string {
	return fmt.Sprintf("[GET /processors/{id}/state][%d] processorsGetStateNotFound ", 404)
}

func (o *ProcessorsGetStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProcessorsGetStateConflict creates a ProcessorsGetStateConflict with default headers values
func NewProcessorsGetStateConflict() *ProcessorsGetStateConflict {
	return &ProcessorsGetStateConflict{}
}

/*ProcessorsGetStateConflict handles this case with default header values.

The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.
*/
type ProcessorsGetStateConflict struct {
}

func (o *ProcessorsGetStateConflict) Error() string {
	return fmt.Sprintf("[GET /processors/{id}/state][%d] processorsGetStateConflict ", 409)
}

func (o *ProcessorsGetStateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
