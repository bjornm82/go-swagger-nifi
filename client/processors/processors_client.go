// Code generated by go-swagger; DO NOT EDIT.

package processors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new processors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for processors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ClearStateProcessors(params *ClearStateProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*ClearStateProcessorsOK, error)

	DeleteProcessor(params *DeleteProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProcessorOK, error)

	GetProcessor(params *GetProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorOK, error)

	GetProcessorDiagnostics(params *GetProcessorDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorDiagnosticsOK, error)

	GetProcessorRunStatusDetails(params *GetProcessorRunStatusDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorRunStatusDetailsOK, error)

	GetPropertyDescriptorProcessors(params *GetPropertyDescriptorProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPropertyDescriptorProcessorsOK, error)

	GetStateProcessors(params *GetStateProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStateProcessorsOK, error)

	TerminateProcessor(params *TerminateProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*TerminateProcessorOK, error)

	UpdateProcessor(params *UpdateProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProcessorOK, error)

	UpdateRunStatusProcessors(params *UpdateRunStatusProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunStatusProcessorsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ClearStateProcessors clears the state for a processor
*/
func (a *Client) ClearStateProcessors(params *ClearStateProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*ClearStateProcessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearStateProcessorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clearStateProcessors",
		Method:             "POST",
		PathPattern:        "/processors/{id}/state/clear-requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClearStateProcessorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClearStateProcessorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clearStateProcessors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProcessor deletes a processor
*/
func (a *Client) DeleteProcessor(params *DeleteProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProcessorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProcessor",
		Method:             "DELETE",
		PathPattern:        "/processors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessor gets a processor
*/
func (a *Client) GetProcessor(params *GetProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessor",
		Method:             "GET",
		PathPattern:        "/processors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessorDiagnostics gets diagnostics information about a processor

  Note: This endpoint is subject to change as NiFi and it's REST API evolve.
*/
func (a *Client) GetProcessorDiagnostics(params *GetProcessorDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessorDiagnostics",
		Method:             "GET",
		PathPattern:        "/processors/{id}/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorDiagnosticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessorDiagnostics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProcessorRunStatusDetails submits a query to retrieve the run status details of all processors that are in the given list of processor i ds
*/
func (a *Client) GetProcessorRunStatusDetails(params *GetProcessorRunStatusDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessorRunStatusDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessorRunStatusDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessorRunStatusDetails",
		Method:             "POST",
		PathPattern:        "/processors/run-status-details/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProcessorRunStatusDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessorRunStatusDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessorRunStatusDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPropertyDescriptorProcessors gets the descriptor for a processor property
*/
func (a *Client) GetPropertyDescriptorProcessors(params *GetPropertyDescriptorProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPropertyDescriptorProcessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPropertyDescriptorProcessorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPropertyDescriptorProcessors",
		Method:             "GET",
		PathPattern:        "/processors/{id}/descriptors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPropertyDescriptorProcessorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPropertyDescriptorProcessorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPropertyDescriptorProcessors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStateProcessors gets the state for a processor
*/
func (a *Client) GetStateProcessors(params *GetStateProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStateProcessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStateProcessorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStateProcessors",
		Method:             "GET",
		PathPattern:        "/processors/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStateProcessorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStateProcessorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStateProcessors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TerminateProcessor terminates a processor essentially deleting its threads and any active tasks
*/
func (a *Client) TerminateProcessor(params *TerminateProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*TerminateProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerminateProcessorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "terminateProcessor",
		Method:             "DELETE",
		PathPattern:        "/processors/{id}/threads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TerminateProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerminateProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for terminateProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProcessor updates a processor
*/
func (a *Client) UpdateProcessor(params *UpdateProcessorParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProcessorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProcessor",
		Method:             "PUT",
		PathPattern:        "/processors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProcessorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProcessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProcessor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRunStatusProcessors updates run status of a processor
*/
func (a *Client) UpdateRunStatusProcessors(params *UpdateRunStatusProcessorsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRunStatusProcessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRunStatusProcessorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRunStatusProcessors",
		Method:             "PUT",
		PathPattern:        "/processors/{id}/run-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRunStatusProcessorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRunStatusProcessorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRunStatusProcessors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
