// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParameterContextDTO parameter context d t o
// swagger:model ParameterContextDTO
type ParameterContextDTO struct {

	// The Process Groups that are bound to this Parameter Context
	// Read Only: true
	// Unique: true
	BoundProcessGroups []*ProcessGroupEntity `json:"boundProcessGroups"`

	// The Description of the Parameter Context.
	Description string `json:"description,omitempty"`

	// The ID the Parameter Context.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The Name of the Parameter Context.
	Name string `json:"name,omitempty"`

	// The Parameters for the Parameter Context
	// Unique: true
	Parameters []*ParameterEntity `json:"parameters"`
}

// Validate validates this parameter context d t o
func (m *ParameterContextDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoundProcessGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParameterContextDTO) validateBoundProcessGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.BoundProcessGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("boundProcessGroups", "body", m.BoundProcessGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.BoundProcessGroups); i++ {
		if swag.IsZero(m.BoundProcessGroups[i]) { // not required
			continue
		}

		if m.BoundProcessGroups[i] != nil {
			if err := m.BoundProcessGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boundProcessGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ParameterContextDTO) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if err := validate.UniqueItems("parameters", "body", m.Parameters); err != nil {
		return err
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParameterContextDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParameterContextDTO) UnmarshalBinary(b []byte) error {
	var res ParameterContextDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
