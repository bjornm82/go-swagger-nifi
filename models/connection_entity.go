// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectionEntity connection entity
// swagger:model ConnectionEntity
type ConnectionEntity struct {

	// The bend points on the connection.
	Bends []*PositionDTO `json:"bends"`

	// The bulletins for this component.
	Bulletins []*BulletinEntity `json:"bulletins"`

	// component
	Component *ConnectionDTO `json:"component,omitempty"`

	// The identifier of the group of the destination of this connection.
	DestinationGroupID string `json:"destinationGroupId,omitempty"`

	// The identifier of the destination of this connection.
	DestinationID string `json:"destinationId,omitempty"`

	// The type of component the destination connectable is.
	// Required: true
	// Enum: [PROCESSOR REMOTE_INPUT_PORT REMOTE_OUTPUT_PORT INPUT_PORT OUTPUT_PORT FUNNEL]
	DestinationType *string `json:"destinationType"`

	// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
	DisconnectedNodeAcknowledged bool `json:"disconnectedNodeAcknowledged,omitempty"`

	// The z index of the connection.
	GetzIndex int64 `json:"getzIndex,omitempty"`

	// The id of the component.
	ID string `json:"id,omitempty"`

	// The index of the bend point where to place the connection label.
	LabelIndex int32 `json:"labelIndex,omitempty"`

	// The permissions for this component.
	Permissions *PermissionsDTO `json:"permissions,omitempty"`

	// The position of this component in the UI if applicable.
	Position *PositionDTO `json:"position,omitempty"`

	// The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
	Revision *RevisionDTO `json:"revision,omitempty"`

	// The identifier of the group of the source of this connection.
	SourceGroupID string `json:"sourceGroupId,omitempty"`

	// The identifier of the source of this connection.
	SourceID string `json:"sourceId,omitempty"`

	// The type of component the source connectable is.
	// Required: true
	// Enum: [PROCESSOR REMOTE_INPUT_PORT REMOTE_OUTPUT_PORT INPUT_PORT OUTPUT_PORT FUNNEL]
	SourceType *string `json:"sourceType"`

	// The status of the connection.
	Status *ConnectionStatusDTO `json:"status,omitempty"`

	// The URI for futures requests to the component.
	URI string `json:"uri,omitempty"`
}

// Validate validates this connection entity
func (m *ConnectionEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBends(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBulletins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionEntity) validateBends(formats strfmt.Registry) error {

	if swag.IsZero(m.Bends) { // not required
		return nil
	}

	for i := 0; i < len(m.Bends); i++ {
		if swag.IsZero(m.Bends[i]) { // not required
			continue
		}

		if m.Bends[i] != nil {
			if err := m.Bends[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bends" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectionEntity) validateBulletins(formats strfmt.Registry) error {

	if swag.IsZero(m.Bulletins) { // not required
		return nil
	}

	for i := 0; i < len(m.Bulletins); i++ {
		if swag.IsZero(m.Bulletins[i]) { // not required
			continue
		}

		if m.Bulletins[i] != nil {
			if err := m.Bulletins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bulletins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectionEntity) validateComponent(formats strfmt.Registry) error {

	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

var connectionEntityTypeDestinationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROCESSOR","REMOTE_INPUT_PORT","REMOTE_OUTPUT_PORT","INPUT_PORT","OUTPUT_PORT","FUNNEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectionEntityTypeDestinationTypePropEnum = append(connectionEntityTypeDestinationTypePropEnum, v)
	}
}

const (

	// ConnectionEntityDestinationTypePROCESSOR captures enum value "PROCESSOR"
	ConnectionEntityDestinationTypePROCESSOR string = "PROCESSOR"

	// ConnectionEntityDestinationTypeREMOTEINPUTPORT captures enum value "REMOTE_INPUT_PORT"
	ConnectionEntityDestinationTypeREMOTEINPUTPORT string = "REMOTE_INPUT_PORT"

	// ConnectionEntityDestinationTypeREMOTEOUTPUTPORT captures enum value "REMOTE_OUTPUT_PORT"
	ConnectionEntityDestinationTypeREMOTEOUTPUTPORT string = "REMOTE_OUTPUT_PORT"

	// ConnectionEntityDestinationTypeINPUTPORT captures enum value "INPUT_PORT"
	ConnectionEntityDestinationTypeINPUTPORT string = "INPUT_PORT"

	// ConnectionEntityDestinationTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	ConnectionEntityDestinationTypeOUTPUTPORT string = "OUTPUT_PORT"

	// ConnectionEntityDestinationTypeFUNNEL captures enum value "FUNNEL"
	ConnectionEntityDestinationTypeFUNNEL string = "FUNNEL"
)

// prop value enum
func (m *ConnectionEntity) validateDestinationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, connectionEntityTypeDestinationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConnectionEntity) validateDestinationType(formats strfmt.Registry) error {

	if err := validate.Required("destinationType", "body", m.DestinationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDestinationTypeEnum("destinationType", "body", *m.DestinationType); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionEntity) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionEntity) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionEntity) validateRevision(formats strfmt.Registry) error {

	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

var connectionEntityTypeSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROCESSOR","REMOTE_INPUT_PORT","REMOTE_OUTPUT_PORT","INPUT_PORT","OUTPUT_PORT","FUNNEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectionEntityTypeSourceTypePropEnum = append(connectionEntityTypeSourceTypePropEnum, v)
	}
}

const (

	// ConnectionEntitySourceTypePROCESSOR captures enum value "PROCESSOR"
	ConnectionEntitySourceTypePROCESSOR string = "PROCESSOR"

	// ConnectionEntitySourceTypeREMOTEINPUTPORT captures enum value "REMOTE_INPUT_PORT"
	ConnectionEntitySourceTypeREMOTEINPUTPORT string = "REMOTE_INPUT_PORT"

	// ConnectionEntitySourceTypeREMOTEOUTPUTPORT captures enum value "REMOTE_OUTPUT_PORT"
	ConnectionEntitySourceTypeREMOTEOUTPUTPORT string = "REMOTE_OUTPUT_PORT"

	// ConnectionEntitySourceTypeINPUTPORT captures enum value "INPUT_PORT"
	ConnectionEntitySourceTypeINPUTPORT string = "INPUT_PORT"

	// ConnectionEntitySourceTypeOUTPUTPORT captures enum value "OUTPUT_PORT"
	ConnectionEntitySourceTypeOUTPUTPORT string = "OUTPUT_PORT"

	// ConnectionEntitySourceTypeFUNNEL captures enum value "FUNNEL"
	ConnectionEntitySourceTypeFUNNEL string = "FUNNEL"
)

// prop value enum
func (m *ConnectionEntity) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, connectionEntityTypeSourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConnectionEntity) validateSourceType(formats strfmt.Registry) error {

	if err := validate.Required("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", *m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionEntity) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionEntity) UnmarshalBinary(b []byte) error {
	var res ConnectionEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
