// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrentUserEntity current user entity
//
// swagger:model CurrentUserEntity
type CurrentUserEntity struct {

	// Whether the current user is anonymous.
	Anonymous bool `json:"anonymous,omitempty"`

	// Whether the current user can version flows.
	CanVersionFlows bool `json:"canVersionFlows,omitempty"`

	// Permissions for specific component restrictions.
	// Unique: true
	ComponentRestrictionPermissions []*ComponentRestrictionPermissionDTO `json:"componentRestrictionPermissions"`

	// Permissions for accessing the controller.
	ControllerPermissions *PermissionsDTO `json:"controllerPermissions,omitempty"`

	// Permissions for accessing counters.
	CountersPermissions *PermissionsDTO `json:"countersPermissions,omitempty"`

	// The user identity being serialized.
	Identity string `json:"identity,omitempty"`

	// Permissions for accessing parameter contexts.
	ParameterContextPermissions *PermissionsDTO `json:"parameterContextPermissions,omitempty"`

	// Permissions for accessing the policies.
	PoliciesPermissions *PermissionsDTO `json:"policiesPermissions,omitempty"`

	// Permissions for querying provenance.
	ProvenancePermissions *PermissionsDTO `json:"provenancePermissions,omitempty"`

	// Permissions for accessing restricted components. Note: the read permission are not used and will always be false.
	RestrictedComponentsPermissions *PermissionsDTO `json:"restrictedComponentsPermissions,omitempty"`

	// Permissions for accessing system.
	SystemPermissions *PermissionsDTO `json:"systemPermissions,omitempty"`

	// Permissions for accessing tenants.
	TenantsPermissions *PermissionsDTO `json:"tenantsPermissions,omitempty"`
}

// Validate validates this current user entity
func (m *CurrentUserEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentRestrictionPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountersPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterContextPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoliciesPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvenancePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictedComponentsPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantsPermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentUserEntity) validateComponentRestrictionPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.ComponentRestrictionPermissions) { // not required
		return nil
	}

	if err := validate.UniqueItems("componentRestrictionPermissions", "body", m.ComponentRestrictionPermissions); err != nil {
		return err
	}

	for i := 0; i < len(m.ComponentRestrictionPermissions); i++ {
		if swag.IsZero(m.ComponentRestrictionPermissions[i]) { // not required
			continue
		}

		if m.ComponentRestrictionPermissions[i] != nil {
			if err := m.ComponentRestrictionPermissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("componentRestrictionPermissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CurrentUserEntity) validateControllerPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.ControllerPermissions) { // not required
		return nil
	}

	if m.ControllerPermissions != nil {
		if err := m.ControllerPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUserEntity) validateCountersPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.CountersPermissions) { // not required
		return nil
	}

	if m.CountersPermissions != nil {
		if err := m.CountersPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("countersPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUserEntity) validateParameterContextPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterContextPermissions) { // not required
		return nil
	}

	if m.ParameterContextPermissions != nil {
		if err := m.ParameterContextPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameterContextPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUserEntity) validatePoliciesPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.PoliciesPermissions) { // not required
		return nil
	}

	if m.PoliciesPermissions != nil {
		if err := m.PoliciesPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policiesPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUserEntity) validateProvenancePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvenancePermissions) { // not required
		return nil
	}

	if m.ProvenancePermissions != nil {
		if err := m.ProvenancePermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provenancePermissions")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUserEntity) validateRestrictedComponentsPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.RestrictedComponentsPermissions) { // not required
		return nil
	}

	if m.RestrictedComponentsPermissions != nil {
		if err := m.RestrictedComponentsPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restrictedComponentsPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUserEntity) validateSystemPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemPermissions) { // not required
		return nil
	}

	if m.SystemPermissions != nil {
		if err := m.SystemPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *CurrentUserEntity) validateTenantsPermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantsPermissions) { // not required
		return nil
	}

	if m.TenantsPermissions != nil {
		if err := m.TenantsPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenantsPermissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrentUserEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentUserEntity) UnmarshalBinary(b []byte) error {
	var res CurrentUserEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
